# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  node: circleci/node@4.7.0
jobs:
  test:
    docker:
      - image: circleci/golang:1.15.8
    steps:
      - checkout
      - run:
          name: Install go-ethereum and abigen
          command: |
            go get -u github.com/ethereum/go-ethereum@v1.10.6
            go install github.com/ethereum/go-ethereum/cmd/abigen
      - node/install:
          install-yarn: false
      - run: node --version
      - node/install-packages:
          override-ci-command: npm install
      - run: npm run setup
      - run:
          name: Install Project Dependencies
          command: go mod download
      - run:
          name: "Install Dependencies"
          command: |
            go get github.com/mattn/goveralls
            go get -u github.com/ory/go-acc
      - run:
          name: "Generate Coverage"
          command: |
            go-acc ./... --ignore pkg
      - run:
          name: "Publish Coverage to Coveralls.io"
          command: |
            goveralls -coverprofile=coverage.txt -service semaphore -repotoken $COVERALLS_TOKEN
      - persist_to_workspace:
          root: .
          paths:
            - .
  push-docker-build:
    docker:
      - image: cimg/go:1.17.6
        environment:
          IMAGE_NAME: "razornetwork/razor-go"

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: Install Docker Buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L "https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx version
            sudo apt-get update && sudo apt-get install -y binfmt-support qemu-user-static
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --privileged --rm tonistiigi/binfmt --install arm64
            docker context create buildcontext
            docker buildx create buildcontext --use
      - run:
          name: "Build docker image"
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
            docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag $IMAGE_NAME:$CIRCLE_TAG .
workflows:
  tests:
    jobs:
      - test
  publish:
    jobs:
      - push-docker-build:
          context: Build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
