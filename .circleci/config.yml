# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  node: circleci/node@4.7.0
jobs:
  test:
    docker:
      - image: circleci/golang:1.15.8
    steps:
      - checkout
      - run:
          name: Install go-ethereum and abigen
          command: |
            go get -u github.com/ethereum/go-ethereum@v1.10.6
            go install github.com/ethereum/go-ethereum/cmd/abigen
      - node/install:
          install-yarn: false
      - run: node --version
      - node/install-packages:
          override-ci-command: npm install
      - run: npm run setup
      - run:
          name: Install Project Dependencies
          command: go mod download
      - run:
          name: "Install Dependencies"
          command: |
            go get github.com/mattn/goveralls
            go get -u github.com/ory/go-acc
      - run:
          name: "Generate Coverage"
          command: |
            go-acc ./... --ignore pkg
      - run:
          name: "Publish Coverage to Coveralls.io"
          command: |
            goveralls -coverprofile=coverage.txt -service semaphore -repotoken $COVERALLS_TOKEN
      - persist_to_workspace:
          root: .
          paths:
            - .
  push-build:
    docker:
      - image: circleci/golang:1.15.8
        environment:
          IMAGE_NAME: "razornetwork/razor-go"

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: "Build docker image"
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
            docker build -t $IMAGE_NAME:$CIRCLE_TAG .
            docker push $IMAGE_NAME:$CIRCLE_TAG
  arm-build:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    # machine: true
    # resource_class: shrikant-ns/local-large
    environment:
      IMAGE_NAME: "razornetwork/razor-go"
    steps:
      - checkout
      - run:
          name: Build
          command: docker build .
workflows:
  # tests:
  #   jobs:
  #     - test
  arm-build:
    jobs:
      - arm-build
  publish:
    jobs:
      - push-build:
          context: Build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
