# name: CI/CD Workflow

# on:
#   push:
#     tags:
#       - 'v*'

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - name: Setup Go
#         uses: actions/setup-go@v2
#         with:
#           go-version: '1.17.6'

#       - name: Install dependencies
#         run: |
#           sudo add-apt-repository -y ppa:ethereum/ethereum
#           sudo apt-get update
#           sudo apt-get install npm ethereum
#           npm i
#           go get -d github.com/ethereum/go-ethereum@v1.10.8 \
#           && go install github.com/ethereum/go-ethereum/cmd/abigen@v1.10.8 \
#           && go install github.com/mattn/goveralls@v0.0.11 \
#           && go install github.com/ory/go-acc@v0.2.7 \
#           && go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.2

#       - name: Run tests
#         run: go-acc ./... --ignore razor/accounts/mocks --ignore razor/cmd/mocks --ignore razor/utils/mocks --ignore pkg --ignore razor/path/mocks --output coverage.txt

#       - name: Run benchmarks
#         run: go test ./... -bench=. -run=^#

#       - name: Publish Coverage to Coveralls.io
#         uses: coverallsapp/github-action@v1
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           path-to-lcov: ./coverage.txt

#   build-and-push-docker:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           platforms: linux/amd64,linux/arm64
#           push: true
#           tags: razornetwork/razor-go:${{ github.ref }}

#   create-release:
#     needs: [test, build-and-push-docker]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#           prerelease: false

---
name: CI/CD Pipeline
on:
  push:
    tags:
      - v*
  pull_request:
    branches:
      - "*"
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      - name: Install Dependencies
        run: >
          sudo add-apt-repository -y ppa:ethereum/ethereum

          sudo apt-get update

          sudo apt-get install -y npm ethereum

          npm install

          go get -d github.com/ethereum/go-ethereum@v1.10.8 \

          && go install github.com/ethereum/go-ethereum/cmd/abigen@v1.10.8 \

          && go install github.com/mattn/goveralls@v0.0.11 \

          && go install github.com/ory/go-acc@v0.2.7 \

          && go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.2
      - name: Run make setup
        run: make setup
      - name: Run gofmt
        run: |
          gofmt
      - name: Run golangci-lint
        run: |
          golangci-lint run -v --timeout 5m
      - name: Execute test case
        run: >
          go-acc ./... --ignore razor/accounts/mocks --ignore razor/cmd/mocks
          --ignore razor/utils/mocks --ignore pkg --ignore razor/path/mocks
          --output coverage.txt
      - name: Run benchmarks
        run: |
          go test ./... -bench=. -run=^#
      # COVERALLS_TOKEN needs to be added to repo secrets
      # - name: Publish Coverage to Coveralls.io
      #   run: >
      #     goveralls -coverprofile=coverage.txt -service github -repotoken ${{secrets.COVERALLS_TOKEN }}
      - uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: persist
  build-amd:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      - uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: retrieve

      - name: Install Dependencies
        run: >
          sudo add-apt-repository -y ppa:ethereum/ethereum

          sudo apt-get update

          sudo apt-get install -y npm ethereum

          npm install

          go get -d github.com/ethereum/go-ethereum@v1.10.8 \

          && go install github.com/ethereum/go-ethereum/cmd/abigen@v1.10.8 \

          && go install github.com/mattn/goveralls@v0.0.11 \

          && go install github.com/ory/go-acc@v0.2.7 \

          && go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.2

      - name: Create AMD Artifact
        run: |
          # ... [commands to create AMD artifact]
          npm i
          npm run build-noargs
          cd build/bin
          tar -czvf razor_go.linux-amd64.tar.gz razor
          mv razor_go.linux-amd64.tar.gz ../../

      - name: Upload AMD Artifact
        uses: actions/upload-artifact@v2
        with:
          name: razor_go.linux-amd64.tar.gz
          path: razor_go.linux-amd64.tar.gz
  build-arm:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6

      - uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: retrieve

      - name: Install Dependencies
        run: >
          sudo add-apt-repository -y ppa:ethereum/ethereum

          sudo apt-get update

          sudo apt-get install -y npm ethereum

          npm install

          go get -d github.com/ethereum/go-ethereum@v1.10.8 \

          && go install github.com/ethereum/go-ethereum/cmd/abigen@v1.10.8 \

          && go install github.com/mattn/goveralls@v0.0.11 \

          && go install github.com/ory/go-acc@v0.2.7 \

          && go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.2

      - name: Create ARM Artifact
        run: |
          # ... [commands to create ARM artifact]
          npm i
          npm run build-noargs
          cd build/bin
          tar -czvf razor_go.linux-arm64.tar.gz razor
          mv razor_go.linux-arm64.tar.gz ../../

      - name: Upload ARM Artifact
        uses: actions/upload-artifact@v2
        with:
          name: razor_go.linux-arm64.tar.gz
          path: razor_go.linux-arm64.tar.gz


  publish-github-release:
    runs-on: ubuntu-latest
    needs:
      - build-amd
      - build-arm
    # if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: razor_go.linux-amd64.tar.gz, razor_go.linux-amd64.tar.gz
      - name: Display structure of downloaded files
        run: ls -R
      # - name: Publish Release on GitHub
      #   run: >
      #     REPO_OWNER=${{ github.repository }} | cut -d'/' -f1

      #     REPO_NAME=${{ github.repository }} | cut -d'/' -f2

      #     VERSION=$(git describe --tags --abbrev=0)

      #     mv razor_go.linux-amd64.tar.gz razor_go.${VERSION}.linux-amd64.tar.gz

      #     mv razor_go.linux-arm64.tar.gz razor_go.${VERSION}.linux-arm64.tar.gz

      #     ghr -t ${GITHUB_TOKEN} -u $REPO_OWNER -r $REPO_NAME -c ${GITHUB_SHA} ${VERSION} razor_go.${VERSION}.linux-amd64.tar.gz


  push-docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: razornetwork/razor-go:${{ github.ref }}
