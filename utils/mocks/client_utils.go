// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ClientUtils is an autogenerated mock type for the ClientUtils type
type ClientUtils struct {
	mock.Mock
}

// BalanceAt provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ClientUtils) BalanceAt(_a0 *ethclient.Client, _a1 context.Context, _a2 common.Address, _a3 *big.Int) (*big.Int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, common.Address, *big.Int) *big.Int); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, common.Address, *big.Int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderByNumber provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClientUtils) HeaderByNumber(_a0 *ethclient.Client, _a1 context.Context, _a2 *big.Int) (*types.Header, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, *big.Int) *types.Header); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, *big.Int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionReceipt provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClientUtils) TransactionReceipt(_a0 *ethclient.Client, _a1 context.Context, _a2 common.Hash) (*types.Receipt, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *types.Receipt
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, common.Hash) *types.Receipt); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Receipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, common.Hash) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
