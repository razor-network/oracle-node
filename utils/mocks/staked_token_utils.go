// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"
	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"
)

// StakedTokenUtils is an autogenerated mock type for the StakedTokenUtils type
type StakedTokenUtils struct {
	mock.Mock
}

// BalanceOf provides a mock function with given fields: client, tokenAddress, address
func (_m *StakedTokenUtils) BalanceOf(client *ethclient.Client, tokenAddress common.Address, address common.Address) (*big.Int, error) {
	ret := _m.Called(client, tokenAddress, address)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address, common.Address) (*big.Int, error)); ok {
		return rf(client, tokenAddress, address)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address, common.Address) *big.Int); ok {
		r0 = rf(client, tokenAddress, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, common.Address, common.Address) error); ok {
		r1 = rf(client, tokenAddress, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStakedTokenUtils creates a new instance of StakedTokenUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakedTokenUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *StakedTokenUtils {
	mock := &StakedTokenUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
