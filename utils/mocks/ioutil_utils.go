// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	io "io"
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// IoutilUtils is an autogenerated mock type for the IoutilUtils type
type IoutilUtils struct {
	mock.Mock
}

// ReadAll provides a mock function with given fields: _a0
func (_m *IoutilUtils) ReadAll(_a0 io.ReadCloser) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(io.ReadCloser) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.ReadCloser) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFile provides a mock function with given fields: _a0
func (_m *IoutilUtils) ReadFile(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFile provides a mock function with given fields: _a0, _a1, _a2
func (_m *IoutilUtils) WriteFile(_a0 string, _a1 []byte, _a2 fs.FileMode) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
