// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	big "math/big"

	retry "github.com/avast/retry-go"
	mock "github.com/stretchr/testify/mock"
)

// OptionUtils is an autogenerated mock type for the OptionUtils type
type OptionUtils struct {
	mock.Mock
}

// ConvertToNumber provides a mock function with given fields: _a0
func (_m *OptionUtils) ConvertToNumber(_a0 interface{}) (*big.Float, error) {
	ret := _m.Called(_a0)

	var r0 *big.Float
	if rf, ok := ret.Get(0).(func(interface{}) *big.Float); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Float)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Marshal provides a mock function with given fields: _a0
func (_m *OptionUtils) Marshal(_a0 interface{}) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryAttempts provides a mock function with given fields: _a0
func (_m *OptionUtils) RetryAttempts(_a0 uint) retry.Option {
	ret := _m.Called(_a0)

	var r0 retry.Option
	if rf, ok := ret.Get(0).(func(uint) retry.Option); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(retry.Option)
		}
	}

	return r0
}

// Unmarshal provides a mock function with given fields: _a0, _a1
func (_m *OptionUtils) Unmarshal(_a0 []byte, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
