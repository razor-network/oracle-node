// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	accounts "razor/accounts"

	abi "github.com/ethereum/go-ethereum/accounts/abi"

	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	bindings "razor/pkg/bindings"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	coretypes "razor/core/types"

	ecdsa "crypto/ecdsa"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	ethereum "github.com/ethereum/go-ethereum"

	io "io"

	mock "github.com/stretchr/testify/mock"

	retry "github.com/avast/retry-go"

	types "github.com/ethereum/go-ethereum/core/types"
)

// OptionUtils is an autogenerated mock type for the OptionUtils type
type OptionUtils struct {
	mock.Mock
}

// BalanceAt provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *OptionUtils) BalanceAt(_a0 *ethclient.Client, _a1 context.Context, _a2 common.Address, _a3 *big.Int) (*big.Int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, common.Address, *big.Int) *big.Int); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, common.Address, *big.Int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertToNumber provides a mock function with given fields: _a0
func (_m *OptionUtils) ConvertToNumber(_a0 interface{}) (*big.Float, error) {
	ret := _m.Called(_a0)

	var r0 *big.Float
	if rf, ok := ret.Get(0).(func(interface{}) *big.Float); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Float)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateGas provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) EstimateGas(_a0 *ethclient.Client, _a1 context.Context, _a2 ethereum.CallMsg) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, ethereum.CallMsg) uint64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, ethereum.CallMsg) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterLogs provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) FilterLogs(_a0 *ethclient.Client, _a1 context.Context, _a2 ethereum.FilterQuery) ([]types.Log, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []types.Log
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, ethereum.FilterQuery) []types.Log); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, ethereum.FilterQuery) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveCollections provides a mock function with given fields: _a0, _a1
func (_m *OptionUtils) GetActiveCollections(_a0 *ethclient.Client, _a1 *bind.CallOpts) ([]uint16, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []uint16
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts) []uint16); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint16)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsset provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) GetAsset(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint16) (coretypes.Asset, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 coretypes.Asset
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint16) coretypes.Asset); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(coretypes.Asset)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint16) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) GetBlock(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32) (bindings.StructsBlock, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bindings.StructsBlock
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32) bindings.StructsBlock); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bindings.StructsBlock)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultPath provides a mock function with given fields:
func (_m *OptionUtils) GetDefaultPath() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobFilePath provides a mock function with given fields:
func (_m *OptionUtils) GetJobFilePath() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumActiveCollections provides a mock function with given fields: _a0, _a1
func (_m *OptionUtils) GetNumActiveCollections(_a0 *ethclient.Client, _a1 *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts) *big.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumAssets provides a mock function with given fields: _a0, _a1
func (_m *OptionUtils) GetNumAssets(_a0 *ethclient.Client, _a1 *bind.CallOpts) (uint16, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts) uint16); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumProposedBlocks provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) GetNumProposedBlocks(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32) (uint8, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32) uint8); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKey provides a mock function with given fields: address, password, keystorePath, accountUtils
func (_m *OptionUtils) GetPrivateKey(address string, password string, keystorePath string, accountUtils accounts.AccountInterface) *ecdsa.PrivateKey {
	ret := _m.Called(address, password, keystorePath, accountUtils)

	var r0 *ecdsa.PrivateKey
	if rf, ok := ret.Get(0).(func(string, string, string, accounts.AccountInterface) *ecdsa.PrivateKey); ok {
		r0 = rf(address, password, keystorePath, accountUtils)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	return r0
}

// GetProposedBlock provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *OptionUtils) GetProposedBlock(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32, _a3 uint32) (bindings.StructsBlock, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bindings.StructsBlock
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32, uint32) bindings.StructsBlock); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bindings.StructsBlock)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderByNumber provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) HeaderByNumber(_a0 *ethclient.Client, _a1 context.Context, _a2 *big.Int) (*types.Header, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, *big.Int) *types.Header); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, *big.Int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Jobs provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) Jobs(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint16) (bindings.StructsJob, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bindings.StructsJob
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint16) bindings.StructsJob); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bindings.StructsJob)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint16) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxAltBlocks provides a mock function with given fields: _a0, _a1
func (_m *OptionUtils) MaxAltBlocks(_a0 *ethclient.Client, _a1 *bind.CallOpts) (uint8, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts) uint8); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinStake provides a mock function with given fields: _a0, _a1
func (_m *OptionUtils) MinStake(_a0 *ethclient.Client, _a1 *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts) *big.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeyedTransactorWithChainID provides a mock function with given fields: key, chainID
func (_m *OptionUtils) NewKeyedTransactorWithChainID(key *ecdsa.PrivateKey, chainID *big.Int) (*bind.TransactOpts, error) {
	ret := _m.Called(key, chainID)

	var r0 *bind.TransactOpts
	if rf, ok := ret.Get(0).(func(*ecdsa.PrivateKey, *big.Int) *bind.TransactOpts); ok {
		r0 = rf(key, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecdsa.PrivateKey, *big.Int) error); ok {
		r1 = rf(key, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pack provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) Pack(_a0 abi.ABI, _a1 string, _a2 ...interface{}) ([]byte, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _a2...)
	ret := _m.Called(_ca...)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(abi.ABI, string, ...interface{}) []byte); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(abi.ABI, string, ...interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parse provides a mock function with given fields: _a0
func (_m *OptionUtils) Parse(_a0 io.Reader) (abi.ABI, error) {
	ret := _m.Called(_a0)

	var r0 abi.ABI
	if rf, ok := ret.Get(0).(func(io.Reader) abi.ABI); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abi.ABI)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PendingNonceAt provides a mock function with given fields: _a0, _a1, _a2
func (_m *OptionUtils) PendingNonceAt(_a0 *ethclient.Client, _a1 context.Context, _a2 common.Address) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context, common.Address) uint64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context, common.Address) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields: _a0
func (_m *OptionUtils) ReadAll(_a0 io.ReadCloser) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(io.ReadCloser) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.ReadCloser) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadJSONData provides a mock function with given fields: _a0
func (_m *OptionUtils) ReadJSONData(_a0 string) (map[string]*coretypes.StructsJob, error) {
	ret := _m.Called(_a0)

	var r0 map[string]*coretypes.StructsJob
	if rf, ok := ret.Get(0).(func(string) map[string]*coretypes.StructsJob); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*coretypes.StructsJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryAttempts provides a mock function with given fields: _a0
func (_m *OptionUtils) RetryAttempts(_a0 uint) retry.Option {
	ret := _m.Called(_a0)

	var r0 retry.Option
	if rf, ok := ret.Get(0).(func(uint) retry.Option); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(retry.Option)
		}
	}

	return r0
}

// SortedProposedBlockIds provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *OptionUtils) SortedProposedBlockIds(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32, _a3 *big.Int) (uint32, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32, *big.Int) uint32); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32, *big.Int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuggestGasPrice provides a mock function with given fields: _a0, _a1
func (_m *OptionUtils) SuggestGasPrice(_a0 *ethclient.Client, _a1 context.Context) (*big.Int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, context.Context) *big.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, context.Context) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
