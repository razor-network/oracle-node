// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	bindings "razor/pkg/bindings"

	common "github.com/ethereum/go-ethereum/common"
	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"
)

// BindingsUtils is an autogenerated mock type for the BindingsUtils type
type BindingsUtils struct {
	mock.Mock
}

// NewBlockManager provides a mock function with given fields: address, client
func (_m *BindingsUtils) NewBlockManager(address common.Address, client *ethclient.Client) (*bindings.BlockManager, error) {
	ret := _m.Called(address, client)

	var r0 *bindings.BlockManager
	if rf, ok := ret.Get(0).(func(common.Address, *ethclient.Client) *bindings.BlockManager); ok {
		r0 = rf(address, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.BlockManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *ethclient.Client) error); ok {
		r1 = rf(address, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCollectionManager provides a mock function with given fields: address, client
func (_m *BindingsUtils) NewCollectionManager(address common.Address, client *ethclient.Client) (*bindings.CollectionManager, error) {
	ret := _m.Called(address, client)

	var r0 *bindings.CollectionManager
	if rf, ok := ret.Get(0).(func(common.Address, *ethclient.Client) *bindings.CollectionManager); ok {
		r0 = rf(address, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.CollectionManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *ethclient.Client) error); ok {
		r1 = rf(address, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRAZOR provides a mock function with given fields: address, client
func (_m *BindingsUtils) NewRAZOR(address common.Address, client *ethclient.Client) (*bindings.RAZOR, error) {
	ret := _m.Called(address, client)

	var r0 *bindings.RAZOR
	if rf, ok := ret.Get(0).(func(common.Address, *ethclient.Client) *bindings.RAZOR); ok {
		r0 = rf(address, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.RAZOR)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *ethclient.Client) error); ok {
		r1 = rf(address, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStakeManager provides a mock function with given fields: address, client
func (_m *BindingsUtils) NewStakeManager(address common.Address, client *ethclient.Client) (*bindings.StakeManager, error) {
	ret := _m.Called(address, client)

	var r0 *bindings.StakeManager
	if rf, ok := ret.Get(0).(func(common.Address, *ethclient.Client) *bindings.StakeManager); ok {
		r0 = rf(address, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakeManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *ethclient.Client) error); ok {
		r1 = rf(address, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStakedToken provides a mock function with given fields: address, client
func (_m *BindingsUtils) NewStakedToken(address common.Address, client *ethclient.Client) (*bindings.StakedToken, error) {
	ret := _m.Called(address, client)

	var r0 *bindings.StakedToken
	if rf, ok := ret.Get(0).(func(common.Address, *ethclient.Client) *bindings.StakedToken); ok {
		r0 = rf(address, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakedToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *ethclient.Client) error); ok {
		r1 = rf(address, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVoteManager provides a mock function with given fields: address, client
func (_m *BindingsUtils) NewVoteManager(address common.Address, client *ethclient.Client) (*bindings.VoteManager, error) {
	ret := _m.Called(address, client)

	var r0 *bindings.VoteManager
	if rf, ok := ret.Get(0).(func(common.Address, *ethclient.Client) *bindings.VoteManager); ok {
		r0 = rf(address, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.VoteManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *ethclient.Client) error); ok {
		r1 = rf(address, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
