// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	big "math/big"
	bindings "razor/pkg/bindings"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	types "razor/core/types"
)

// VoteManagerUtils is an autogenerated mock type for the VoteManagerUtils type
type VoteManagerUtils struct {
	mock.Mock
}

// Commitments provides a mock function with given fields: _a0, _a1, _a2
func (_m *VoteManagerUtils) Commitments(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32) (types.Commitment, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 types.Commitment
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32) types.Commitment); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(types.Commitment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochLastCommitted provides a mock function with given fields: _a0, _a1, _a2
func (_m *VoteManagerUtils) GetEpochLastCommitted(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32) (uint32, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32) uint32); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochLastRevealed provides a mock function with given fields: _a0, _a1, _a2
func (_m *VoteManagerUtils) GetEpochLastRevealed(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32) (uint32, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32) uint32); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfluenceSnapshot provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *VoteManagerUtils) GetInfluenceSnapshot(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32, _a3 uint32) (*big.Int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32, uint32) *big.Int); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandaoHash provides a mock function with given fields: _a0, _a1
func (_m *VoteManagerUtils) GetRandaoHash(_a0 *ethclient.Client, _a1 *bind.CallOpts) ([32]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 [32]byte
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts) [32]byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakeSnapshot provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *VoteManagerUtils) GetStakeSnapshot(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32, _a3 uint32) (*big.Int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32, uint32) *big.Int); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalInfluenceRevealed provides a mock function with given fields: _a0, _a1, _a2
func (_m *VoteManagerUtils) GetTotalInfluenceRevealed(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32) (*big.Int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32) *big.Int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVote provides a mock function with given fields: _a0, _a1, _a2
func (_m *VoteManagerUtils) GetVote(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint32) (bindings.StructsVote, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bindings.StructsVote
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32) bindings.StructsVote); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bindings.StructsVote)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoteValue provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *VoteManagerUtils) GetVoteValue(_a0 *ethclient.Client, _a1 *bind.CallOpts, _a2 uint16, _a3 uint32) (*big.Int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint16, uint32) *big.Int); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint16, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
