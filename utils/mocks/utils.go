// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	coretypes "razor/core/types"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// Utils is an autogenerated mock type for the Utils type
type Utils struct {
	mock.Mock
}

// BalanceAtWithRetry provides a mock function with given fields: client, account
func (_m *Utils) BalanceAtWithRetry(client *ethclient.Client, account common.Address) (*big.Int, error) {
	ret := _m.Called(client, account)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address) *big.Int); ok {
		r0 = rf(client, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, common.Address) error); ok {
		r1 = rf(client, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateGasWithRetry provides a mock function with given fields: client, message
func (_m *Utils) EstimateGasWithRetry(client *ethclient.Client, message ethereum.CallMsg) (uint64, error) {
	ret := _m.Called(client, message)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*ethclient.Client, ethereum.CallMsg) uint64); ok {
		r0 = rf(client, message)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, ethereum.CallMsg) error); ok {
		r1 = rf(client, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterLogsWithRetry provides a mock function with given fields: client, query
func (_m *Utils) FilterLogsWithRetry(client *ethclient.Client, query ethereum.FilterQuery) ([]types.Log, error) {
	ret := _m.Called(client, query)

	var r0 []types.Log
	if rf, ok := ret.Get(0).(func(*ethclient.Client, ethereum.FilterQuery) []types.Log); ok {
		r0 = rf(client, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, ethereum.FilterQuery) error); ok {
		r1 = rf(client, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasLimit provides a mock function with given fields: transactionData, txnOpts
func (_m *Utils) GetGasLimit(transactionData coretypes.TransactionOptions, txnOpts *bind.TransactOpts) (uint64, error) {
	ret := _m.Called(transactionData, txnOpts)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(coretypes.TransactionOptions, *bind.TransactOpts) uint64); ok {
		r0 = rf(transactionData, txnOpts)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(coretypes.TransactionOptions, *bind.TransactOpts) error); ok {
		r1 = rf(transactionData, txnOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPrice provides a mock function with given fields: _a0, _a1
func (_m *Utils) GetGasPrice(_a0 *ethclient.Client, _a1 coretypes.Configurations) *big.Int {
	ret := _m.Called(_a0, _a1)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, coretypes.Configurations) *big.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetLatestBlockWithRetry provides a mock function with given fields: client
func (_m *Utils) GetLatestBlockWithRetry(client *ethclient.Client) (*types.Header, error) {
	ret := _m.Called(client)

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *types.Header); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingNonceAtWithRetry provides a mock function with given fields: _a0, _a1
func (_m *Utils) GetPendingNonceAtWithRetry(_a0 *ethclient.Client, _a1 common.Address) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, common.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxnOpts provides a mock function with given fields: _a0
func (_m *Utils) GetTxnOpts(_a0 coretypes.TransactionOptions) *bind.TransactOpts {
	ret := _m.Called(_a0)

	var r0 *bind.TransactOpts
	if rf, ok := ret.Get(0).(func(coretypes.TransactionOptions) *bind.TransactOpts); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	return r0
}

// IncreaseGasLimitValue provides a mock function with given fields: client, gasLimit, gasLimitMultiplier
func (_m *Utils) IncreaseGasLimitValue(client *ethclient.Client, gasLimit uint64, gasLimitMultiplier float32) (uint64, error) {
	ret := _m.Called(client, gasLimit, gasLimitMultiplier)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint64, float32) uint64); ok {
		r0 = rf(client, gasLimit, gasLimitMultiplier)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint64, float32) error); ok {
		r1 = rf(client, gasLimit, gasLimitMultiplier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiplyFloatAndBigInt provides a mock function with given fields: _a0, _a1
func (_m *Utils) MultiplyFloatAndBigInt(_a0 *big.Int, _a1 float64) *big.Int {
	ret := _m.Called(_a0, _a1)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*big.Int, float64) *big.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// SuggestGasPriceWithRetry provides a mock function with given fields: _a0
func (_m *Utils) SuggestGasPriceWithRetry(_a0 *ethclient.Client) (*big.Int, error) {
	ret := _m.Called(_a0)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *big.Int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
