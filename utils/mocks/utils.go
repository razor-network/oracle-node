// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	big "math/big"
	bindings "razor/pkg/bindings"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	cache "razor/cache"

	common "github.com/ethereum/go-ethereum/common"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	pflag "github.com/spf13/pflag"

	rpc "razor/rpc"

	types "razor/core/types"
)

// Utils is an autogenerated mock type for the Utils type
type Utils struct {
	mock.Mock
}

// AccountManagerForKeystore provides a mock function with given fields:
func (_m *Utils) AccountManagerForKeystore() (types.AccountManagerInterface, error) {
	ret := _m.Called()

	var r0 types.AccountManagerInterface
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.AccountManagerInterface, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.AccountManagerInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AccountManagerInterface)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddJobToJSON provides a mock function with given fields: fileName, job
func (_m *Utils) AddJobToJSON(fileName string, job *types.StructsJob) error {
	ret := _m.Called(fileName, job)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.StructsJob) error); ok {
		r0 = rf(fileName, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Aggregate provides a mock function with given fields: rpcParameters, previousEpoch, collection, commitParams
func (_m *Utils) Aggregate(rpcParameters rpc.RPCParameters, previousEpoch uint32, collection bindings.StructsCollection, commitParams *types.CommitParams) (*big.Int, error) {
	ret := _m.Called(rpcParameters, previousEpoch, collection, commitParams)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, bindings.StructsCollection, *types.CommitParams) (*big.Int, error)); ok {
		return rf(rpcParameters, previousEpoch, collection, commitParams)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, bindings.StructsCollection, *types.CommitParams) *big.Int); ok {
		r0 = rf(rpcParameters, previousEpoch, collection, commitParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, bindings.StructsCollection, *types.CommitParams) error); ok {
		r1 = rf(rpcParameters, previousEpoch, collection, commitParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Allowance provides a mock function with given fields: rpcParameters, owner, spender
func (_m *Utils) Allowance(rpcParameters rpc.RPCParameters, owner common.Address, spender common.Address) (*big.Int, error) {
	ret := _m.Called(rpcParameters, owner, spender)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, common.Address, common.Address) (*big.Int, error)); ok {
		return rf(rpcParameters, owner, spender)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, common.Address, common.Address) *big.Int); ok {
		r0 = rf(rpcParameters, owner, spender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, common.Address, common.Address) error); ok {
		r1 = rf(rpcParameters, owner, spender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignPassword provides a mock function with given fields: flagSet
func (_m *Utils) AssignPassword(flagSet *pflag.FlagSet) string {
	ret := _m.Called(flagSet)

	var r0 string
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) string); ok {
		r0 = rf(flagSet)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AssignStakerId provides a mock function with given fields: rpcParameters, flagSet, address
func (_m *Utils) AssignStakerId(rpcParameters rpc.RPCParameters, flagSet *pflag.FlagSet, address string) (uint32, error) {
	ret := _m.Called(rpcParameters, flagSet, address)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, *pflag.FlagSet, string) (uint32, error)); ok {
		return rf(rpcParameters, flagSet, address)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, *pflag.FlagSet, string) uint32); ok {
		r0 = rf(rpcParameters, flagSet, address)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, *pflag.FlagSet, string) error); ok {
		r1 = rf(rpcParameters, flagSet, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateBlockTime provides a mock function with given fields: rpcParameters
func (_m *Utils) CalculateBlockTime(rpcParameters rpc.RPCParameters) int64 {
	ret := _m.Called(rpcParameters)

	var r0 int64
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) int64); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CalculateSalt provides a mock function with given fields: epoch, medians
func (_m *Utils) CalculateSalt(epoch uint32, medians []*big.Int) [32]byte {
	ret := _m.Called(epoch, medians)

	var r0 [32]byte
	if rf, ok := ret.Get(0).(func(uint32, []*big.Int) [32]byte); ok {
		r0 = rf(epoch, medians)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	return r0
}

// CheckAmountAndBalance provides a mock function with given fields: amountInWei, balance
func (_m *Utils) CheckAmountAndBalance(amountInWei *big.Int, balance *big.Int) *big.Int {
	ret := _m.Called(amountInWei, balance)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int) *big.Int); ok {
		r0 = rf(amountInWei, balance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// CheckEthBalanceIsZero provides a mock function with given fields: rpcParameters, address
func (_m *Utils) CheckEthBalanceIsZero(rpcParameters rpc.RPCParameters, address string) {
	_m.Called(rpcParameters, address)
}

// CheckPassword provides a mock function with given fields: account
func (_m *Utils) CheckPassword(account types.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckTransactionReceipt provides a mock function with given fields: rpcManager, _txHash
func (_m *Utils) CheckTransactionReceipt(rpcManager rpc.RPCParameters, _txHash string) int {
	ret := _m.Called(rpcManager, _txHash)

	var r0 int
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) int); ok {
		r0 = rf(rpcManager, _txHash)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ConnectToClient provides a mock function with given fields: provider
func (_m *Utils) ConnectToClient(provider string) *ethclient.Client {
	ret := _m.Called(provider)

	var r0 *ethclient.Client
	if rf, ok := ret.Get(0).(func(string) *ethclient.Client); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethclient.Client)
		}
	}

	return r0
}

// DeleteJobFromJSON provides a mock function with given fields: fileName, jobId
func (_m *Utils) DeleteJobFromJSON(fileName string, jobId string) error {
	ret := _m.Called(fileName, jobId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(fileName, jobId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disputes provides a mock function with given fields: rpcParameters, epoch, address
func (_m *Utils) Disputes(rpcParameters rpc.RPCParameters, epoch uint32, address common.Address) (types.DisputesStruct, error) {
	ret := _m.Called(rpcParameters, epoch, address)

	var r0 types.DisputesStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, common.Address) (types.DisputesStruct, error)); ok {
		return rf(rpcParameters, epoch, address)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, common.Address) types.DisputesStruct); ok {
		r0 = rf(rpcParameters, epoch, address)
	} else {
		r0 = ret.Get(0).(types.DisputesStruct)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, common.Address) error); ok {
		r1 = rf(rpcParameters, epoch, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateBlockNumberAtEpochBeginning provides a mock function with given fields: rpcParameters, currentBlockNumber
func (_m *Utils) EstimateBlockNumberAtEpochBeginning(rpcParameters rpc.RPCParameters, currentBlockNumber *big.Int) (*big.Int, error) {
	ret := _m.Called(rpcParameters, currentBlockNumber)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, *big.Int) (*big.Int, error)); ok {
		return rf(rpcParameters, currentBlockNumber)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, *big.Int) *big.Int); ok {
		r0 = rf(rpcParameters, currentBlockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, *big.Int) error); ok {
		r1 = rf(rpcParameters, currentBlockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchBalance provides a mock function with given fields: rpcParameters, accountAddress
func (_m *Utils) FetchBalance(rpcParameters rpc.RPCParameters, accountAddress string) (*big.Int, error) {
	ret := _m.Called(rpcParameters, accountAddress)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) (*big.Int, error)); ok {
		return rf(rpcParameters, accountAddress)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) *big.Int); ok {
		r0 = rf(rpcParameters, accountAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, string) error); ok {
		r1 = rf(rpcParameters, accountAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPreviousValue provides a mock function with given fields: rpcParameters, epoch, assetId
func (_m *Utils) FetchPreviousValue(rpcParameters rpc.RPCParameters, epoch uint32, assetId uint16) (*big.Int, error) {
	ret := _m.Called(rpcParameters, epoch, assetId)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint16) (*big.Int, error)); ok {
		return rf(rpcParameters, epoch, assetId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint16) *big.Int); ok {
		r0 = rf(rpcParameters, epoch, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, uint16) error); ok {
		r1 = rf(rpcParameters, epoch, assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveCollection provides a mock function with given fields: collectionsCache, collectionId
func (_m *Utils) GetActiveCollection(collectionsCache *cache.CollectionsCache, collectionId uint16) (bindings.StructsCollection, error) {
	ret := _m.Called(collectionsCache, collectionId)

	var r0 bindings.StructsCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(*cache.CollectionsCache, uint16) (bindings.StructsCollection, error)); ok {
		return rf(collectionsCache, collectionId)
	}
	if rf, ok := ret.Get(0).(func(*cache.CollectionsCache, uint16) bindings.StructsCollection); ok {
		r0 = rf(collectionsCache, collectionId)
	} else {
		r0 = ret.Get(0).(bindings.StructsCollection)
	}

	if rf, ok := ret.Get(1).(func(*cache.CollectionsCache, uint16) error); ok {
		r1 = rf(collectionsCache, collectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveCollectionIds provides a mock function with given fields: rpcParameters
func (_m *Utils) GetActiveCollectionIds(rpcParameters rpc.RPCParameters) ([]uint16, error) {
	ret := _m.Called(rpcParameters)

	var r0 []uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) ([]uint16, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) []uint16); ok {
		r0 = rf(rpcParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint16)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveJob provides a mock function with given fields: rpcParameters, jobId
func (_m *Utils) GetActiveJob(rpcParameters rpc.RPCParameters, jobId uint16) (bindings.StructsJob, error) {
	ret := _m.Called(rpcParameters, jobId)

	var r0 bindings.StructsJob
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) (bindings.StructsJob, error)); ok {
		return rf(rpcParameters, jobId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) bindings.StructsJob); ok {
		r0 = rf(rpcParameters, jobId)
	} else {
		r0 = ret.Get(0).(bindings.StructsJob)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16) error); ok {
		r1 = rf(rpcParameters, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveStatus provides a mock function with given fields: rpcParameters, id
func (_m *Utils) GetActiveStatus(rpcParameters rpc.RPCParameters, id uint16) (bool, error) {
	ret := _m.Called(rpcParameters, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) (bool, error)); ok {
		return rf(rpcParameters, id)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) bool); ok {
		r0 = rf(rpcParameters, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16) error); ok {
		r1 = rf(rpcParameters, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregatedDataOfCollection provides a mock function with given fields: rpcParameters, collectionId, epoch, commitParams
func (_m *Utils) GetAggregatedDataOfCollection(rpcParameters rpc.RPCParameters, collectionId uint16, epoch uint32, commitParams *types.CommitParams) (*big.Int, error) {
	ret := _m.Called(rpcParameters, collectionId, epoch, commitParams)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16, uint32, *types.CommitParams) (*big.Int, error)); ok {
		return rf(rpcParameters, collectionId, epoch, commitParams)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16, uint32, *types.CommitParams) *big.Int); ok {
		r0 = rf(rpcParameters, collectionId, epoch, commitParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16, uint32, *types.CommitParams) error); ok {
		r1 = rf(rpcParameters, collectionId, epoch, commitParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCollections provides a mock function with given fields: rpcParameters
func (_m *Utils) GetAllCollections(rpcParameters rpc.RPCParameters) ([]bindings.StructsCollection, error) {
	ret := _m.Called(rpcParameters)

	var r0 []bindings.StructsCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) ([]bindings.StructsCollection, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) []bindings.StructsCollection); ok {
		r0 = rf(rpcParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bindings.StructsCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignedCollections provides a mock function with given fields: rpcParameters, numActiveCollections, seed
func (_m *Utils) GetAssignedCollections(rpcParameters rpc.RPCParameters, numActiveCollections uint16, seed []byte) (map[int]bool, []*big.Int, error) {
	ret := _m.Called(rpcParameters, numActiveCollections, seed)

	var r0 map[int]bool
	var r1 []*big.Int
	var r2 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16, []byte) (map[int]bool, []*big.Int, error)); ok {
		return rf(rpcParameters, numActiveCollections, seed)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16, []byte) map[int]bool); ok {
		r0 = rf(rpcParameters, numActiveCollections, seed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16, []byte) []*big.Int); ok {
		r1 = rf(rpcParameters, numActiveCollections, seed)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*big.Int)
		}
	}

	if rf, ok := ret.Get(2).(func(rpc.RPCParameters, uint16, []byte) error); ok {
		r2 = rf(rpcParameters, numActiveCollections, seed)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBlock provides a mock function with given fields: rpcParameters, epoch
func (_m *Utils) GetBlock(rpcParameters rpc.RPCParameters, epoch uint32) (bindings.StructsBlock, error) {
	ret := _m.Called(rpcParameters, epoch)

	var r0 bindings.StructsBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (bindings.StructsBlock, error)); ok {
		return rf(rpcParameters, epoch)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) bindings.StructsBlock); ok {
		r0 = rf(rpcParameters, epoch)
	} else {
		r0 = ret.Get(0).(bindings.StructsBlock)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockIndexToBeConfirmed provides a mock function with given fields: rpcParameters
func (_m *Utils) GetBlockIndexToBeConfirmed(rpcParameters rpc.RPCParameters) (int8, error) {
	ret := _m.Called(rpcParameters)

	var r0 int8
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (int8, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) int8); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(int8)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockManager provides a mock function with given fields: client
func (_m *Utils) GetBlockManager(client *ethclient.Client) *bindings.BlockManager {
	ret := _m.Called(client)

	var r0 *bindings.BlockManager
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.BlockManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.BlockManager)
		}
	}

	return r0
}

// GetBlockManagerWithOpts provides a mock function with given fields: client
func (_m *Utils) GetBlockManagerWithOpts(client *ethclient.Client) (*bindings.BlockManager, bind.CallOpts) {
	ret := _m.Called(client)

	var r0 *bindings.BlockManager
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*bindings.BlockManager, bind.CallOpts)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.BlockManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.BlockManager)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) bind.CallOpts); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetBountyLock provides a mock function with given fields: rpcParameters, bountyId
func (_m *Utils) GetBountyLock(rpcParameters rpc.RPCParameters, bountyId uint32) (types.BountyLock, error) {
	ret := _m.Called(rpcParameters, bountyId)

	var r0 types.BountyLock
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (types.BountyLock, error)); ok {
		return rf(rpcParameters, bountyId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) types.BountyLock); ok {
		r0 = rf(rpcParameters, bountyId)
	} else {
		r0 = ret.Get(0).(types.BountyLock)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, bountyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBufferedState provides a mock function with given fields: header, stateBuffer, buffer
func (_m *Utils) GetBufferedState(header *coretypes.Header, stateBuffer uint64, buffer int32) (int64, error) {
	ret := _m.Called(header, stateBuffer, buffer)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*coretypes.Header, uint64, int32) (int64, error)); ok {
		return rf(header, stateBuffer, buffer)
	}
	if rf, ok := ret.Get(0).(func(*coretypes.Header, uint64, int32) int64); ok {
		r0 = rf(header, stateBuffer, buffer)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*coretypes.Header, uint64, int32) error); ok {
		r1 = rf(header, stateBuffer, buffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollection provides a mock function with given fields: rpcParameters, collectionId
func (_m *Utils) GetCollection(rpcParameters rpc.RPCParameters, collectionId uint16) (bindings.StructsCollection, error) {
	ret := _m.Called(rpcParameters, collectionId)

	var r0 bindings.StructsCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) (bindings.StructsCollection, error)); ok {
		return rf(rpcParameters, collectionId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) bindings.StructsCollection); ok {
		r0 = rf(rpcParameters, collectionId)
	} else {
		r0 = ret.Get(0).(bindings.StructsCollection)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16) error); ok {
		r1 = rf(rpcParameters, collectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIdFromIndex provides a mock function with given fields: rpcParameters, medianIndex
func (_m *Utils) GetCollectionIdFromIndex(rpcParameters rpc.RPCParameters, medianIndex uint16) (uint16, error) {
	ret := _m.Called(rpcParameters, medianIndex)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) (uint16, error)); ok {
		return rf(rpcParameters, medianIndex)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) uint16); ok {
		r0 = rf(rpcParameters, medianIndex)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16) error); ok {
		r1 = rf(rpcParameters, medianIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIdFromLeafId provides a mock function with given fields: rpcParameters, leafId
func (_m *Utils) GetCollectionIdFromLeafId(rpcParameters rpc.RPCParameters, leafId uint16) (uint16, error) {
	ret := _m.Called(rpcParameters, leafId)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) (uint16, error)); ok {
		return rf(rpcParameters, leafId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) uint16); ok {
		r0 = rf(rpcParameters, leafId)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16) error); ok {
		r1 = rf(rpcParameters, leafId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionManager provides a mock function with given fields: client
func (_m *Utils) GetCollectionManager(client *ethclient.Client) *bindings.CollectionManager {
	ret := _m.Called(client)

	var r0 *bindings.CollectionManager
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.CollectionManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.CollectionManager)
		}
	}

	return r0
}

// GetCollectionManagerWithOpts provides a mock function with given fields: client
func (_m *Utils) GetCollectionManagerWithOpts(client *ethclient.Client) (*bindings.CollectionManager, bind.CallOpts) {
	ret := _m.Called(client)

	var r0 *bindings.CollectionManager
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*bindings.CollectionManager, bind.CallOpts)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.CollectionManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.CollectionManager)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) bind.CallOpts); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetCommitment provides a mock function with given fields: rpcParameters, address
func (_m *Utils) GetCommitment(rpcParameters rpc.RPCParameters, address string) (types.Commitment, error) {
	ret := _m.Called(rpcParameters, address)

	var r0 types.Commitment
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) (types.Commitment, error)); ok {
		return rf(rpcParameters, address)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) types.Commitment); ok {
		r0 = rf(rpcParameters, address)
	} else {
		r0 = ret.Get(0).(types.Commitment)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, string) error); ok {
		r1 = rf(rpcParameters, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfirmedBlocks provides a mock function with given fields: rpcParameters, epoch
func (_m *Utils) GetConfirmedBlocks(rpcParameters rpc.RPCParameters, epoch uint32) (types.ConfirmedBlock, error) {
	ret := _m.Called(rpcParameters, epoch)

	var r0 types.ConfirmedBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (types.ConfirmedBlock, error)); ok {
		return rf(rpcParameters, epoch)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) types.ConfirmedBlock); ok {
		r0 = rf(rpcParameters, epoch)
	} else {
		r0 = ret.Get(0).(types.ConfirmedBlock)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataToCommitFromJob provides a mock function with given fields: job, commitParams
func (_m *Utils) GetDataToCommitFromJob(job bindings.StructsJob, commitParams *types.CommitParams) (*big.Int, error) {
	ret := _m.Called(job, commitParams)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(bindings.StructsJob, *types.CommitParams) (*big.Int, error)); ok {
		return rf(job, commitParams)
	}
	if rf, ok := ret.Get(0).(func(bindings.StructsJob, *types.CommitParams) *big.Int); ok {
		r0 = rf(job, commitParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(bindings.StructsJob, *types.CommitParams) error); ok {
		r1 = rf(job, commitParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataToCommitFromJobs provides a mock function with given fields: jobs, commitParams
func (_m *Utils) GetDataToCommitFromJobs(jobs []bindings.StructsJob, commitParams *types.CommitParams) ([]*big.Int, []uint8) {
	ret := _m.Called(jobs, commitParams)

	var r0 []*big.Int
	var r1 []uint8
	if rf, ok := ret.Get(0).(func([]bindings.StructsJob, *types.CommitParams) ([]*big.Int, []uint8)); ok {
		return rf(jobs, commitParams)
	}
	if rf, ok := ret.Get(0).(func([]bindings.StructsJob, *types.CommitParams) []*big.Int); ok {
		r0 = rf(jobs, commitParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func([]bindings.StructsJob, *types.CommitParams) []uint8); ok {
		r1 = rf(jobs, commitParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uint8)
		}
	}

	return r0, r1
}

// GetEpoch provides a mock function with given fields: rpcParameters
func (_m *Utils) GetEpoch(rpcParameters rpc.RPCParameters) (uint32, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint32, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint32); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochLastCommitted provides a mock function with given fields: rpcParameters, stakerId
func (_m *Utils) GetEpochLastCommitted(rpcParameters rpc.RPCParameters, stakerId uint32) (uint32, error) {
	ret := _m.Called(rpcParameters, stakerId)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (uint32, error)); ok {
		return rf(rpcParameters, stakerId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) uint32); ok {
		r0 = rf(rpcParameters, stakerId)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochLastProposed provides a mock function with given fields: rpcParameters, stakerId
func (_m *Utils) GetEpochLastProposed(rpcParameters rpc.RPCParameters, stakerId uint32) (uint32, error) {
	ret := _m.Called(rpcParameters, stakerId)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (uint32, error)); ok {
		return rf(rpcParameters, stakerId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) uint32); ok {
		r0 = rf(rpcParameters, stakerId)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochLastRevealed provides a mock function with given fields: rpcParameters, stakerId
func (_m *Utils) GetEpochLastRevealed(rpcParameters rpc.RPCParameters, stakerId uint32) (uint32, error) {
	ret := _m.Called(rpcParameters, stakerId)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (uint32, error)); ok {
		return rf(rpcParameters, stakerId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) uint32); ok {
		r0 = rf(rpcParameters, stakerId)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochLimitForUpdateCommission provides a mock function with given fields: rpcParameters
func (_m *Utils) GetEpochLimitForUpdateCommission(rpcParameters rpc.RPCParameters) (uint16, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint16, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint16); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfluenceSnapshot provides a mock function with given fields: rpcParameters, stakerId, epoch
func (_m *Utils) GetInfluenceSnapshot(rpcParameters rpc.RPCParameters, stakerId uint32, epoch uint32) (*big.Int, error) {
	ret := _m.Called(rpcParameters, stakerId, epoch)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32) (*big.Int, error)); ok {
		return rf(rpcParameters, stakerId, epoch)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32) *big.Int); ok {
		r0 = rf(rpcParameters, stakerId, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobs provides a mock function with given fields: rpcParameters
func (_m *Utils) GetJobs(rpcParameters rpc.RPCParameters) ([]bindings.StructsJob, error) {
	ret := _m.Called(rpcParameters)

	var r0 []bindings.StructsJob
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) ([]bindings.StructsJob, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) []bindings.StructsJob); ok {
		r0 = rf(rpcParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bindings.StructsJob)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeafIdOfACollection provides a mock function with given fields: rpcParameters, collectionId
func (_m *Utils) GetLeafIdOfACollection(rpcParameters rpc.RPCParameters, collectionId uint16) (uint16, error) {
	ret := _m.Called(rpcParameters, collectionId)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) (uint16, error)); ok {
		return rf(rpcParameters, collectionId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint16) uint16); ok {
		r0 = rf(rpcParameters, collectionId)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint16) error); ok {
		r1 = rf(rpcParameters, collectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLock provides a mock function with given fields: rpcParameters, address, stakerId, lockType
func (_m *Utils) GetLock(rpcParameters rpc.RPCParameters, address string, stakerId uint32, lockType uint8) (types.Locks, error) {
	ret := _m.Called(rpcParameters, address, stakerId, lockType)

	var r0 types.Locks
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string, uint32, uint8) (types.Locks, error)); ok {
		return rf(rpcParameters, address, stakerId, lockType)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string, uint32, uint8) types.Locks); ok {
		r0 = rf(rpcParameters, address, stakerId, lockType)
	} else {
		r0 = ret.Get(0).(types.Locks)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, string, uint32, uint8) error); ok {
		r1 = rf(rpcParameters, address, stakerId, lockType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaturity provides a mock function with given fields: rpcParameters, age
func (_m *Utils) GetMaturity(rpcParameters rpc.RPCParameters, age uint32) (uint16, error) {
	ret := _m.Called(rpcParameters, age)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (uint16, error)); ok {
		return rf(rpcParameters, age)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) uint16); ok {
		r0 = rf(rpcParameters, age)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, age)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxAltBlocks provides a mock function with given fields: rpcParameters
func (_m *Utils) GetMaxAltBlocks(rpcParameters rpc.RPCParameters) (uint8, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint8, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint8); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxCommission provides a mock function with given fields: rpcParameters
func (_m *Utils) GetMaxCommission(rpcParameters rpc.RPCParameters) (uint8, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint8, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint8); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinSafeRazor provides a mock function with given fields: rpcParameters
func (_m *Utils) GetMinSafeRazor(rpcParameters rpc.RPCParameters) (*big.Int, error) {
	ret := _m.Called(rpcParameters)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (*big.Int, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) *big.Int); ok {
		r0 = rf(rpcParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinStakeAmount provides a mock function with given fields: rpcParameters
func (_m *Utils) GetMinStakeAmount(rpcParameters rpc.RPCParameters) (*big.Int, error) {
	ret := _m.Called(rpcParameters)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (*big.Int, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) *big.Int); ok {
		r0 = rf(rpcParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumActiveCollections provides a mock function with given fields: rpcParameters
func (_m *Utils) GetNumActiveCollections(rpcParameters rpc.RPCParameters) (uint16, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint16, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint16); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumCollections provides a mock function with given fields: rpcParameters
func (_m *Utils) GetNumCollections(rpcParameters rpc.RPCParameters) (uint16, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint16, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint16); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumJobs provides a mock function with given fields: rpcParameters
func (_m *Utils) GetNumJobs(rpcParameters rpc.RPCParameters) (uint16, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint16, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint16); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfProposedBlocks provides a mock function with given fields: rpcParameters, epoch
func (_m *Utils) GetNumberOfProposedBlocks(rpcParameters rpc.RPCParameters, epoch uint32) (uint8, error) {
	ret := _m.Called(rpcParameters, epoch)

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (uint8, error)); ok {
		return rf(rpcParameters, epoch)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) uint8); ok {
		r0 = rf(rpcParameters, epoch)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfStakers provides a mock function with given fields: rpcParameters
func (_m *Utils) GetNumberOfStakers(rpcParameters rpc.RPCParameters) (uint32, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint32, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint32); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOptions provides a mock function with given fields:
func (_m *Utils) GetOptions() bind.CallOpts {
	ret := _m.Called()

	var r0 bind.CallOpts
	if rf, ok := ret.Get(0).(func() bind.CallOpts); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bind.CallOpts)
	}

	return r0
}

// GetProposedBlock provides a mock function with given fields: rpcParameters, epoch, proposedBlockId
func (_m *Utils) GetProposedBlock(rpcParameters rpc.RPCParameters, epoch uint32, proposedBlockId uint32) (bindings.StructsBlock, error) {
	ret := _m.Called(rpcParameters, epoch, proposedBlockId)

	var r0 bindings.StructsBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32) (bindings.StructsBlock, error)); ok {
		return rf(rpcParameters, epoch, proposedBlockId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32) bindings.StructsBlock); ok {
		r0 = rf(rpcParameters, epoch, proposedBlockId)
	} else {
		r0 = ret.Get(0).(bindings.StructsBlock)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, uint32) error); ok {
		r1 = rf(rpcParameters, epoch, proposedBlockId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemainingTimeOfCurrentState provides a mock function with given fields: block, stateBuffer, bufferPercent
func (_m *Utils) GetRemainingTimeOfCurrentState(block *coretypes.Header, stateBuffer uint64, bufferPercent int32) (int64, error) {
	ret := _m.Called(block, stateBuffer, bufferPercent)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*coretypes.Header, uint64, int32) (int64, error)); ok {
		return rf(block, stateBuffer, bufferPercent)
	}
	if rf, ok := ret.Get(0).(func(*coretypes.Header, uint64, int32) int64); ok {
		r0 = rf(block, stateBuffer, bufferPercent)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*coretypes.Header, uint64, int32) error); ok {
		r1 = rf(block, stateBuffer, bufferPercent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRogueRandomValue provides a mock function with given fields: value
func (_m *Utils) GetRogueRandomValue(value int) *big.Int {
	ret := _m.Called(value)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(int) *big.Int); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetSaltFromBlockchain provides a mock function with given fields: rpcParameters
func (_m *Utils) GetSaltFromBlockchain(rpcParameters rpc.RPCParameters) ([32]byte, error) {
	ret := _m.Called(rpcParameters)

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) ([32]byte, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) [32]byte); ok {
		r0 = rf(rpcParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedProposedBlockId provides a mock function with given fields: rpcParameters, epoch, index
func (_m *Utils) GetSortedProposedBlockId(rpcParameters rpc.RPCParameters, epoch uint32, index *big.Int) (uint32, error) {
	ret := _m.Called(rpcParameters, epoch, index)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, *big.Int) (uint32, error)); ok {
		return rf(rpcParameters, epoch, index)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, *big.Int) uint32); ok {
		r0 = rf(rpcParameters, epoch, index)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, *big.Int) error); ok {
		r1 = rf(rpcParameters, epoch, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedProposedBlockIds provides a mock function with given fields: rpcParameters, epoch
func (_m *Utils) GetSortedProposedBlockIds(rpcParameters rpc.RPCParameters, epoch uint32) ([]uint32, error) {
	ret := _m.Called(rpcParameters, epoch)

	var r0 []uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) ([]uint32, error)); ok {
		return rf(rpcParameters, epoch)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) []uint32); ok {
		r0 = rf(rpcParameters, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStake provides a mock function with given fields: rpcParameters, stakerId
func (_m *Utils) GetStake(rpcParameters rpc.RPCParameters, stakerId uint32) (*big.Int, error) {
	ret := _m.Called(rpcParameters, stakerId)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (*big.Int, error)); ok {
		return rf(rpcParameters, stakerId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) *big.Int); ok {
		r0 = rf(rpcParameters, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakeManager provides a mock function with given fields: client
func (_m *Utils) GetStakeManager(client *ethclient.Client) *bindings.StakeManager {
	ret := _m.Called(client)

	var r0 *bindings.StakeManager
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.StakeManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakeManager)
		}
	}

	return r0
}

// GetStakeManagerWithOpts provides a mock function with given fields: client
func (_m *Utils) GetStakeManagerWithOpts(client *ethclient.Client) (*bindings.StakeManager, bind.CallOpts) {
	ret := _m.Called(client)

	var r0 *bindings.StakeManager
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*bindings.StakeManager, bind.CallOpts)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.StakeManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakeManager)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) bind.CallOpts); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetStakeSnapshot provides a mock function with given fields: rpcParameters, stakerId, epoch
func (_m *Utils) GetStakeSnapshot(rpcParameters rpc.RPCParameters, stakerId uint32, epoch uint32) (*big.Int, error) {
	ret := _m.Called(rpcParameters, stakerId, epoch)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32) (*big.Int, error)); ok {
		return rf(rpcParameters, stakerId, epoch)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32) *big.Int); ok {
		r0 = rf(rpcParameters, stakerId, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakedToken provides a mock function with given fields: client, tokenAddress
func (_m *Utils) GetStakedToken(client *ethclient.Client, tokenAddress common.Address) *bindings.StakedToken {
	ret := _m.Called(client, tokenAddress)

	var r0 *bindings.StakedToken
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address) *bindings.StakedToken); ok {
		r0 = rf(client, tokenAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakedToken)
		}
	}

	return r0
}

// GetStakedTokenManagerWithOpts provides a mock function with given fields: client, tokenAddress
func (_m *Utils) GetStakedTokenManagerWithOpts(client *ethclient.Client, tokenAddress common.Address) (*bindings.StakedToken, bind.CallOpts) {
	ret := _m.Called(client, tokenAddress)

	var r0 *bindings.StakedToken
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address) (*bindings.StakedToken, bind.CallOpts)); ok {
		return rf(client, tokenAddress)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address) *bindings.StakedToken); ok {
		r0 = rf(client, tokenAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakedToken)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, common.Address) bind.CallOpts); ok {
		r1 = rf(client, tokenAddress)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetStaker provides a mock function with given fields: rpcParameters, stakerId
func (_m *Utils) GetStaker(rpcParameters rpc.RPCParameters, stakerId uint32) (bindings.StructsStaker, error) {
	ret := _m.Called(rpcParameters, stakerId)

	var r0 bindings.StructsStaker
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (bindings.StructsStaker, error)); ok {
		return rf(rpcParameters, stakerId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) bindings.StructsStaker); ok {
		r0 = rf(rpcParameters, stakerId)
	} else {
		r0 = ret.Get(0).(bindings.StructsStaker)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakerId provides a mock function with given fields: rpcParameters, address
func (_m *Utils) GetStakerId(rpcParameters rpc.RPCParameters, address string) (uint32, error) {
	ret := _m.Called(rpcParameters, address)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) (uint32, error)); ok {
		return rf(rpcParameters, address)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) uint32); ok {
		r0 = rf(rpcParameters, address)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, string) error); ok {
		r1 = rf(rpcParameters, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakerSRZRBalance provides a mock function with given fields: rpcParameters, staker
func (_m *Utils) GetStakerSRZRBalance(rpcParameters rpc.RPCParameters, staker bindings.StructsStaker) (*big.Int, error) {
	ret := _m.Called(rpcParameters, staker)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, bindings.StructsStaker) (*big.Int, error)); ok {
		return rf(rpcParameters, staker)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, bindings.StructsStaker) *big.Int); ok {
		r0 = rf(rpcParameters, staker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, bindings.StructsStaker) error); ok {
		r1 = rf(rpcParameters, staker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateBuffer provides a mock function with given fields: rpcParameters
func (_m *Utils) GetStateBuffer(rpcParameters rpc.RPCParameters) (uint64, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint64, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint64); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenManager provides a mock function with given fields: client
func (_m *Utils) GetTokenManager(client *ethclient.Client) *bindings.RAZOR {
	ret := _m.Called(client)

	var r0 *bindings.RAZOR
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.RAZOR); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.RAZOR)
		}
	}

	return r0
}

// GetTotalInfluenceRevealed provides a mock function with given fields: rpcParameters, epoch, medianIndex
func (_m *Utils) GetTotalInfluenceRevealed(rpcParameters rpc.RPCParameters, epoch uint32, medianIndex uint16) (*big.Int, error) {
	ret := _m.Called(rpcParameters, epoch, medianIndex)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint16) (*big.Int, error)); ok {
		return rf(rpcParameters, epoch, medianIndex)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint16) *big.Int); ok {
		r0 = rf(rpcParameters, epoch, medianIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, uint16) error); ok {
		r1 = rf(rpcParameters, epoch, medianIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxnOpts provides a mock function with given fields: rpcParameters, transactionData
func (_m *Utils) GetTxnOpts(rpcParameters rpc.RPCParameters, transactionData types.TransactionOptions) (*bind.TransactOpts, error) {
	ret := _m.Called(rpcParameters, transactionData)

	var r0 *bind.TransactOpts
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, types.TransactionOptions) (*bind.TransactOpts, error)); ok {
		return rf(rpcParameters, transactionData)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, types.TransactionOptions) *bind.TransactOpts); ok {
		r0 = rf(rpcParameters, transactionData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, types.TransactionOptions) error); ok {
		r1 = rf(rpcParameters, transactionData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUint32 provides a mock function with given fields: flagSet, name
func (_m *Utils) GetUint32(flagSet *pflag.FlagSet, name string) (uint32, error) {
	ret := _m.Called(flagSet, name)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet, string) (uint32, error)); ok {
		return rf(flagSet, name)
	}
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet, string) uint32); ok {
		r0 = rf(flagSet, name)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*pflag.FlagSet, string) error); ok {
		r1 = rf(flagSet, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoteManager provides a mock function with given fields: client
func (_m *Utils) GetVoteManager(client *ethclient.Client) *bindings.VoteManager {
	ret := _m.Called(client)

	var r0 *bindings.VoteManager
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.VoteManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.VoteManager)
		}
	}

	return r0
}

// GetVoteManagerWithOpts provides a mock function with given fields: client
func (_m *Utils) GetVoteManagerWithOpts(client *ethclient.Client) (*bindings.VoteManager, bind.CallOpts) {
	ret := _m.Called(client)

	var r0 *bindings.VoteManager
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*bindings.VoteManager, bind.CallOpts)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.VoteManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.VoteManager)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) bind.CallOpts); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetVoteValue provides a mock function with given fields: rpcParameters, epoch, stakerId, medianIndex
func (_m *Utils) GetVoteValue(rpcParameters rpc.RPCParameters, epoch uint32, stakerId uint32, medianIndex uint16) (*big.Int, error) {
	ret := _m.Called(rpcParameters, epoch, stakerId, medianIndex)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32, uint16) (*big.Int, error)); ok {
		return rf(rpcParameters, epoch, stakerId, medianIndex)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32, uint32, uint16) *big.Int); ok {
		r0 = rf(rpcParameters, epoch, stakerId, medianIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32, uint32, uint16) error); ok {
		r1 = rf(rpcParameters, epoch, stakerId, medianIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawInitiationPeriod provides a mock function with given fields: rpcParameters
func (_m *Utils) GetWithdrawInitiationPeriod(rpcParameters rpc.RPCParameters) (uint16, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint16, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint16); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleOfficialJobsFromJSONFile provides a mock function with given fields: collection, dataString, commitParams
func (_m *Utils) HandleOfficialJobsFromJSONFile(collection bindings.StructsCollection, dataString string, commitParams *types.CommitParams) ([]bindings.StructsJob, []uint16) {
	ret := _m.Called(collection, dataString, commitParams)

	var r0 []bindings.StructsJob
	var r1 []uint16
	if rf, ok := ret.Get(0).(func(bindings.StructsCollection, string, *types.CommitParams) ([]bindings.StructsJob, []uint16)); ok {
		return rf(collection, dataString, commitParams)
	}
	if rf, ok := ret.Get(0).(func(bindings.StructsCollection, string, *types.CommitParams) []bindings.StructsJob); ok {
		r0 = rf(collection, dataString, commitParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bindings.StructsJob)
		}
	}

	if rf, ok := ret.Get(1).(func(bindings.StructsCollection, string, *types.CommitParams) []uint16); ok {
		r1 = rf(collection, dataString, commitParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uint16)
		}
	}

	return r0, r1
}

// IsFlagPassed provides a mock function with given fields: name
func (_m *Utils) IsFlagPassed(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MultiplyFloatAndBigInt provides a mock function with given fields: bigIntVal, floatingVal
func (_m *Utils) MultiplyFloatAndBigInt(bigIntVal *big.Int, floatingVal float64) *big.Int {
	ret := _m.Called(bigIntVal, floatingVal)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*big.Int, float64) *big.Int); ok {
		r0 = rf(bigIntVal, floatingVal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// PasswordPrompt provides a mock function with given fields:
func (_m *Utils) PasswordPrompt() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PrivateKeyPrompt provides a mock function with given fields:
func (_m *Utils) PrivateKeyPrompt() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Prng provides a mock function with given fields: max, prngHashes
func (_m *Utils) Prng(max uint32, prngHashes []byte) *big.Int {
	ret := _m.Called(max, prngHashes)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(uint32, []byte) *big.Int); ok {
		r0 = rf(max, prngHashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ReadJSONData provides a mock function with given fields: fileName
func (_m *Utils) ReadJSONData(fileName string) (map[string]*types.StructsJob, error) {
	ret := _m.Called(fileName)

	var r0 map[string]*types.StructsJob
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]*types.StructsJob, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]*types.StructsJob); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*types.StructsJob)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecondsToReadableTime provides a mock function with given fields: input
func (_m *Utils) SecondsToReadableTime(input int) string {
	ret := _m.Called(input)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StakerInfo provides a mock function with given fields: rpcParameters, stakerId
func (_m *Utils) StakerInfo(rpcParameters rpc.RPCParameters, stakerId uint32) (types.Staker, error) {
	ret := _m.Called(rpcParameters, stakerId)

	var r0 types.Staker
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) (types.Staker, error)); ok {
		return rf(rpcParameters, stakerId)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, uint32) types.Staker); ok {
		r0 = rf(rpcParameters, stakerId)
	} else {
		r0 = ret.Get(0).(types.Staker)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToAssign provides a mock function with given fields: rpcParameters
func (_m *Utils) ToAssign(rpcParameters rpc.RPCParameters) (uint16, error) {
	ret := _m.Called(rpcParameters)

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) (uint16, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters) uint16); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(rpc.RPCParameters) error); ok {
		r1 = rf(rpcParameters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForBlockCompletion provides a mock function with given fields: rpcManager, hashToRead
func (_m *Utils) WaitForBlockCompletion(rpcManager rpc.RPCParameters, hashToRead string) error {
	ret := _m.Called(rpcManager, hashToRead)

	var r0 error
	if rf, ok := ret.Get(0).(func(rpc.RPCParameters, string) error); ok {
		r0 = rf(rpcManager, hashToRead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitTillNextNSecs provides a mock function with given fields: waitTime
func (_m *Utils) WaitTillNextNSecs(waitTime int32) {
	_m.Called(waitTime)
}

// WriteDataToJSON provides a mock function with given fields: fileName, data
func (_m *Utils) WriteDataToJSON(fileName string, data map[string]*types.StructsJob) error {
	ret := _m.Called(fileName, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]*types.StructsJob) error); ok {
		r0 = rf(fileName, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUtils creates a new instance of Utils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *Utils {
	mock := &Utils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
