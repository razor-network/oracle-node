// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	bindings "razor/pkg/bindings"

	ethclient "github.com/ethereum/go-ethereum/ethclient"
	mock "github.com/stretchr/testify/mock"
)

// AssetManagerUtils is an autogenerated mock type for the AssetManagerUtils type
type AssetManagerUtils struct {
	mock.Mock
}

// GetActiveCollections provides a mock function with given fields: client
func (_m *AssetManagerUtils) GetActiveCollections(client *ethclient.Client) ([]uint16, error) {
	ret := _m.Called(client)

	var r0 []uint16
	if rf, ok := ret.Get(0).(func(*ethclient.Client) []uint16); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint16)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollection provides a mock function with given fields: client, id
func (_m *AssetManagerUtils) GetCollection(client *ethclient.Client, id uint16) (bindings.StructsCollection, error) {
	ret := _m.Called(client, id)

	var r0 bindings.StructsCollection
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16) bindings.StructsCollection); ok {
		r0 = rf(client, id)
	} else {
		r0 = ret.Get(0).(bindings.StructsCollection)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint16) error); ok {
		r1 = rf(client, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIdFromIndex provides a mock function with given fields: client, index
func (_m *AssetManagerUtils) GetCollectionIdFromIndex(client *ethclient.Client, index uint16) (uint16, error) {
	ret := _m.Called(client, index)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16) uint16); ok {
		r0 = rf(client, index)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint16) error); ok {
		r1 = rf(client, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: client, id
func (_m *AssetManagerUtils) GetJob(client *ethclient.Client, id uint16) (bindings.StructsJob, error) {
	ret := _m.Called(client, id)

	var r0 bindings.StructsJob
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16) bindings.StructsJob); ok {
		r0 = rf(client, id)
	} else {
		r0 = ret.Get(0).(bindings.StructsJob)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint16) error); ok {
		r1 = rf(client, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumActiveCollections provides a mock function with given fields: client
func (_m *AssetManagerUtils) GetNumActiveCollections(client *ethclient.Client) (uint16, error) {
	ret := _m.Called(client)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint16); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumCollections provides a mock function with given fields: client
func (_m *AssetManagerUtils) GetNumCollections(client *ethclient.Client) (uint16, error) {
	ret := _m.Called(client)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint16); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumJobs provides a mock function with given fields: client
func (_m *AssetManagerUtils) GetNumJobs(client *ethclient.Client) (uint16, error) {
	ret := _m.Called(client)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint16); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Jobs provides a mock function with given fields: client, id
func (_m *AssetManagerUtils) Jobs(client *ethclient.Client, id uint16) (bindings.StructsJob, error) {
	ret := _m.Called(client, id)

	var r0 bindings.StructsJob
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16) bindings.StructsJob); ok {
		r0 = rf(client, id)
	} else {
		r0 = ret.Get(0).(bindings.StructsJob)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint16) error); ok {
		r1 = rf(client, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
