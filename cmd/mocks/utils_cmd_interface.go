// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	big "math/big"
	RPC "razor/rpc"

	accounts "github.com/ethereum/go-ethereum/accounts"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	bindings "razor/pkg/bindings"

	cache "razor/cache"

	common "github.com/ethereum/go-ethereum/common"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	mock "github.com/stretchr/testify/mock"

	pflag "github.com/spf13/pflag"

	types "razor/core/types"
)

// UtilsCmdInterface is an autogenerated mock type for the UtilsCmdInterface type
type UtilsCmdInterface struct {
	mock.Mock
}

// Approve provides a mock function with given fields: rpcParameters, txnArgs
func (_m *UtilsCmdInterface) Approve(rpcParameters RPC.RPCParameters, txnArgs types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(rpcParameters, txnArgs)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions) (common.Hash, error)); ok {
		return rf(rpcParameters, txnArgs)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions) common.Hash); ok {
		r0 = rf(rpcParameters, txnArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.TransactionOptions) error); ok {
		r1 = rf(rpcParameters, txnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApproveUnstake provides a mock function with given fields: rpcParameters, stakerTokenAddress, txnArgs
func (_m *UtilsCmdInterface) ApproveUnstake(rpcParameters RPC.RPCParameters, stakerTokenAddress common.Address, txnArgs types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(rpcParameters, stakerTokenAddress, txnArgs)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, common.Address, types.TransactionOptions) (common.Hash, error)); ok {
		return rf(rpcParameters, stakerTokenAddress, txnArgs)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, common.Address, types.TransactionOptions) common.Hash); ok {
		r0 = rf(rpcParameters, stakerTokenAddress, txnArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, common.Address, types.TransactionOptions) error); ok {
		r1 = rf(rpcParameters, stakerTokenAddress, txnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignAmountInWei provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) AssignAmountInWei(flagSet *pflag.FlagSet) (*big.Int, error) {
	ret := _m.Called(flagSet)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) (*big.Int, error)); ok {
		return rf(flagSet)
	}
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) *big.Int); ok {
		r0 = rf(flagSet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(flagSet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetStakeSnapshotCalls provides a mock function with given fields: rpcParameters, epoch, numberOfStakers
func (_m *UtilsCmdInterface) BatchGetStakeSnapshotCalls(rpcParameters RPC.RPCParameters, epoch uint32, numberOfStakers uint32) ([]*big.Int, error) {
	ret := _m.Called(rpcParameters, epoch, numberOfStakers)

	var r0 []*big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32, uint32) ([]*big.Int, error)); ok {
		return rf(rpcParameters, epoch, numberOfStakers)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32, uint32) []*big.Int); ok {
		r0 = rf(rpcParameters, epoch, numberOfStakers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, uint32, uint32) error); ok {
		r1 = rf(rpcParameters, epoch, numberOfStakers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateSecret provides a mock function with given fields: account, epoch, keystorePath, chainId
func (_m *UtilsCmdInterface) CalculateSecret(account types.Account, epoch uint32, keystorePath string, chainId *big.Int) ([]byte, []byte, error) {
	ret := _m.Called(account, epoch, keystorePath, chainId)

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Account, uint32, string, *big.Int) ([]byte, []byte, error)); ok {
		return rf(account, epoch, keystorePath, chainId)
	}
	if rf, ok := ret.Get(0).(func(types.Account, uint32, string, *big.Int) []byte); ok {
		r0 = rf(account, epoch, keystorePath, chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Account, uint32, string, *big.Int) []byte); ok {
		r1 = rf(account, epoch, keystorePath, chainId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(types.Account, uint32, string, *big.Int) error); ok {
		r2 = rf(account, epoch, keystorePath, chainId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckDisputeForIds provides a mock function with given fields: rpcParameters, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds
func (_m *UtilsCmdInterface) CheckDisputeForIds(rpcParameters RPC.RPCParameters, transactionOpts types.TransactionOptions, epoch uint32, blockIndex uint8, idsInProposedBlock []uint16, revealedCollectionIds []uint16) (*coretypes.Transaction, error) {
	ret := _m.Called(rpcParameters, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)

	var r0 *coretypes.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions, uint32, uint8, []uint16, []uint16) (*coretypes.Transaction, error)); ok {
		return rf(rpcParameters, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions, uint32, uint8, []uint16, []uint16) *coretypes.Transaction); ok {
		r0 = rf(rpcParameters, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.TransactionOptions, uint32, uint8, []uint16, []uint16) error); ok {
		r1 = rf(rpcParameters, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckForLastCommitted provides a mock function with given fields: rpcParameters, staker, epoch
func (_m *UtilsCmdInterface) CheckForLastCommitted(rpcParameters RPC.RPCParameters, staker bindings.StructsStaker, epoch uint32) error {
	ret := _m.Called(rpcParameters, staker, epoch)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, bindings.StructsStaker, uint32) error); ok {
		r0 = rf(rpcParameters, staker, epoch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckToDoResetDispute provides a mock function with given fields: rpcParameters, txnOpts, epoch, sortedValues
func (_m *UtilsCmdInterface) CheckToDoResetDispute(rpcParameters RPC.RPCParameters, txnOpts *bind.TransactOpts, epoch uint32, sortedValues []*big.Int) {
	_m.Called(rpcParameters, txnOpts, epoch, sortedValues)
}

// ClaimBlockReward provides a mock function with given fields: rpcParameters, options
func (_m *UtilsCmdInterface) ClaimBlockReward(rpcParameters RPC.RPCParameters, options types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(rpcParameters, options)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions) (common.Hash, error)); ok {
		return rf(rpcParameters, options)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions) common.Hash); ok {
		r0 = rf(rpcParameters, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.TransactionOptions) error); ok {
		r1 = rf(rpcParameters, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimBounty provides a mock function with given fields: rpcParameters, config, redeemBountyInput
func (_m *UtilsCmdInterface) ClaimBounty(rpcParameters RPC.RPCParameters, config types.Configurations, redeemBountyInput types.RedeemBountyInput) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, redeemBountyInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.RedeemBountyInput) (common.Hash, error)); ok {
		return rf(rpcParameters, config, redeemBountyInput)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.RedeemBountyInput) common.Hash); ok {
		r0 = rf(rpcParameters, config, redeemBountyInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.RedeemBountyInput) error); ok {
		r1 = rf(rpcParameters, config, redeemBountyInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimCommission provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ClaimCommission(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// Commit provides a mock function with given fields: rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitment
func (_m *UtilsCmdInterface) Commit(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, epoch uint32, latestHeader *coretypes.Header, stateBuffer uint64, commitment [32]byte) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitment)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *coretypes.Header, uint64, [32]byte) (common.Hash, error)); ok {
		return rf(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitment)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *coretypes.Header, uint64, [32]byte) common.Hash); ok {
		r0 = rf(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *coretypes.Header, uint64, [32]byte) error); ok {
		r1 = rf(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContractAddresses provides a mock function with given fields:
func (_m *UtilsCmdInterface) ContractAddresses() {
	_m.Called()
}

// Create provides a mock function with given fields: password
func (_m *UtilsCmdInterface) Create(password string) (accounts.Account, error) {
	ret := _m.Called(password)

	var r0 accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (accounts.Account, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) accounts.Account); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCollection provides a mock function with given fields: rpcParameters, config, collectionInput
func (_m *UtilsCmdInterface) CreateCollection(rpcParameters RPC.RPCParameters, config types.Configurations, collectionInput types.CreateCollectionInput) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, collectionInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateCollectionInput) (common.Hash, error)); ok {
		return rf(rpcParameters, config, collectionInput)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateCollectionInput) common.Hash); ok {
		r0 = rf(rpcParameters, config, collectionInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.CreateCollectionInput) error); ok {
		r1 = rf(rpcParameters, config, collectionInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: rpcParameter, config, jobInput
func (_m *UtilsCmdInterface) CreateJob(rpcParameter RPC.RPCParameters, config types.Configurations, jobInput types.CreateJobInput) (common.Hash, error) {
	ret := _m.Called(rpcParameter, config, jobInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateJobInput) (common.Hash, error)); ok {
		return rf(rpcParameter, config, jobInput)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateJobInput) common.Hash); ok {
		r0 = rf(rpcParameter, config, jobInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.CreateJobInput) error); ok {
		r1 = rf(rpcParameter, config, jobInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delegate provides a mock function with given fields: rpcParameters, txnArgs, stakerId
func (_m *UtilsCmdInterface) Delegate(rpcParameters RPC.RPCParameters, txnArgs types.TransactionOptions, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(rpcParameters, txnArgs, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions, uint32) (common.Hash, error)); ok {
		return rf(rpcParameters, txnArgs, stakerId)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions, uint32) common.Hash); ok {
		r0 = rf(rpcParameters, txnArgs, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.TransactionOptions, uint32) error); ok {
		r1 = rf(rpcParameters, txnArgs, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dispute provides a mock function with given fields: rpcParameters, config, account, epoch, blockIndex, proposedBlock, leafId, sortedValues
func (_m *UtilsCmdInterface) Dispute(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, epoch uint32, blockIndex uint8, proposedBlock bindings.StructsBlock, leafId uint16, sortedValues []*big.Int) error {
	ret := _m.Called(rpcParameters, config, account, epoch, blockIndex, proposedBlock, leafId, sortedValues)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, uint8, bindings.StructsBlock, uint16, []*big.Int) error); ok {
		r0 = rf(rpcParameters, config, account, epoch, blockIndex, proposedBlock, leafId, sortedValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteClaimBounty provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteClaimBounty(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCollectionList provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCollectionList(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteContractAddresses provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteContractAddresses(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCreate provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCreate(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCreateCollection provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCreateCollection(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteCreateJob provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteCreateJob(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteDelegate provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteDelegate(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteExtendLock provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteExtendLock(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteImport provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteImport(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteImportEndpoints provides a mock function with given fields:
func (_m *UtilsCmdInterface) ExecuteImportEndpoints() {
	_m.Called()
}

// ExecuteInitiateWithdraw provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteInitiateWithdraw(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteJobList provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteJobList(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteListAccounts provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteListAccounts(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteModifyCollectionStatus provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteModifyCollectionStatus(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteSetDelegation provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteSetDelegation(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteStake provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteStake(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteStakerinfo provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteStakerinfo(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteTransfer provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteTransfer(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUnlockWithdraw provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUnlockWithdraw(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUnstake provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUnstake(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUpdateCollection provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUpdateCollection(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUpdateCommission provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUpdateCommission(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteUpdateJob provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteUpdateJob(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// ExecuteVote provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ExecuteVote(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// GenerateTreeRevealData provides a mock function with given fields: merkleTree, commitData
func (_m *UtilsCmdInterface) GenerateTreeRevealData(merkleTree [][][]byte, commitData types.CommitData) bindings.StructsMerkleTree {
	ret := _m.Called(merkleTree, commitData)

	var r0 bindings.StructsMerkleTree
	if rf, ok := ret.Get(0).(func([][][]byte, types.CommitData) bindings.StructsMerkleTree); ok {
		r0 = rf(merkleTree, commitData)
	} else {
		r0 = ret.Get(0).(bindings.StructsMerkleTree)
	}

	return r0
}

// GetBiggestStakeAndId provides a mock function with given fields: rpcParameters, epoch
func (_m *UtilsCmdInterface) GetBiggestStakeAndId(rpcParameters RPC.RPCParameters, epoch uint32) (*big.Int, uint32, error) {
	ret := _m.Called(rpcParameters, epoch)

	var r0 *big.Int
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32) (*big.Int, uint32, error)); ok {
		return rf(rpcParameters, epoch)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32) *big.Int); ok {
		r0 = rf(rpcParameters, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, uint32) uint32); ok {
		r1 = rf(rpcParameters, epoch)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(RPC.RPCParameters, uint32) error); ok {
		r2 = rf(rpcParameters, epoch)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBountyIdFromEvents provides a mock function with given fields: rpcParameters, blockNumber, bountyHunter
func (_m *UtilsCmdInterface) GetBountyIdFromEvents(rpcParameters RPC.RPCParameters, blockNumber *big.Int, bountyHunter string) (uint32, error) {
	ret := _m.Called(rpcParameters, blockNumber, bountyHunter)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, string) (uint32, error)); ok {
		return rf(rpcParameters, blockNumber, bountyHunter)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, string) uint32); ok {
		r0 = rf(rpcParameters, blockNumber, bountyHunter)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, *big.Int, string) error); ok {
		r1 = rf(rpcParameters, blockNumber, bountyHunter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBufferPercent provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetBufferPercent() (int32, error) {
	ret := _m.Called()

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIdPositionInBlock provides a mock function with given fields: rpcParameters, leafId, proposedBlock
func (_m *UtilsCmdInterface) GetCollectionIdPositionInBlock(rpcParameters RPC.RPCParameters, leafId uint16, proposedBlock bindings.StructsBlock) *big.Int {
	ret := _m.Called(rpcParameters, leafId, proposedBlock)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint16, bindings.StructsBlock) *big.Int); ok {
		r0 = rf(rpcParameters, leafId, proposedBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetCollectionList provides a mock function with given fields: rpcParameters
func (_m *UtilsCmdInterface) GetCollectionList(rpcParameters RPC.RPCParameters) error {
	ret := _m.Called(rpcParameters)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters) error); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigData provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetConfigData() (types.Configurations, error) {
	ret := _m.Called()

	var r0 types.Configurations
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.Configurations, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.Configurations); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Configurations)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochAndState provides a mock function with given fields: rpcParameter
func (_m *UtilsCmdInterface) GetEpochAndState(rpcParameter RPC.RPCParameters) (uint32, int64, error) {
	ret := _m.Called(rpcParameter)

	var r0 uint32
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters) (uint32, int64, error)); ok {
		return rf(rpcParameter)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters) uint32); ok {
		r0 = rf(rpcParameter)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters) int64); ok {
		r1 = rf(rpcParameter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(RPC.RPCParameters) error); ok {
		r2 = rf(rpcParameter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGasLimit provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasLimit() (float32, error) {
	ret := _m.Called()

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func() (float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasLimitOverride provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasLimitOverride() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPrice provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasPrice() (int32, error) {
	ret := _m.Called()

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHTTPTimeout provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetHTTPTimeout() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIteration provides a mock function with given fields: rpcParameters, proposer, bufferPercent
func (_m *UtilsCmdInterface) GetIteration(rpcParameters RPC.RPCParameters, proposer types.ElectedProposer, bufferPercent int32) int {
	ret := _m.Called(rpcParameters, proposer, bufferPercent)

	var r0 int
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.ElectedProposer, int32) int); ok {
		r0 = rf(rpcParameters, proposer, bufferPercent)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetJobList provides a mock function with given fields: rpcParameters
func (_m *UtilsCmdInterface) GetJobList(rpcParameters RPC.RPCParameters) error {
	ret := _m.Called(rpcParameters)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters) error); ok {
		r0 = rf(rpcParameters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLocalMediansData provides a mock function with given fields: rpcParameters, account, epoch, blockNumber, rogueData
func (_m *UtilsCmdInterface) GetLocalMediansData(rpcParameters RPC.RPCParameters, account types.Account, epoch uint32, blockNumber *big.Int, rogueData types.Rogue) (types.ProposeFileData, error) {
	ret := _m.Called(rpcParameters, account, epoch, blockNumber, rogueData)

	var r0 types.ProposeFileData
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Account, uint32, *big.Int, types.Rogue) (types.ProposeFileData, error)); ok {
		return rf(rpcParameters, account, epoch, blockNumber, rogueData)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Account, uint32, *big.Int, types.Rogue) types.ProposeFileData); ok {
		r0 = rf(rpcParameters, account, epoch, blockNumber, rogueData)
	} else {
		r0 = ret.Get(0).(types.ProposeFileData)
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Account, uint32, *big.Int, types.Rogue) error); ok {
		r1 = rf(rpcParameters, account, epoch, blockNumber, rogueData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogFileMaxAge provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogFileMaxAge() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogFileMaxBackups provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogFileMaxBackups() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogFileMaxSize provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogFileMaxSize() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogLevel provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogLevel() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplier provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetMultiplier() (float32, error) {
	ret := _m.Called()

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func() (float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvider provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetProvider() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRPCTimeout provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetRPCTimeout() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSalt provides a mock function with given fields: rpcParameters, epoch
func (_m *UtilsCmdInterface) GetSalt(rpcParameters RPC.RPCParameters, epoch uint32) ([32]byte, error) {
	ret := _m.Called(rpcParameters, epoch)

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32) ([32]byte, error)); ok {
		return rf(rpcParameters, epoch)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32) [32]byte); ok {
		r0 = rf(rpcParameters, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, uint32) error); ok {
		r1 = rf(rpcParameters, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSmallestStakeAndId provides a mock function with given fields: rpcParameters, epoch
func (_m *UtilsCmdInterface) GetSmallestStakeAndId(rpcParameters RPC.RPCParameters, epoch uint32) (*big.Int, uint32, error) {
	ret := _m.Called(rpcParameters, epoch)

	var r0 *big.Int
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32) (*big.Int, uint32, error)); ok {
		return rf(rpcParameters, epoch)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32) *big.Int); ok {
		r0 = rf(rpcParameters, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, uint32) uint32); ok {
		r1 = rf(rpcParameters, epoch)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(RPC.RPCParameters, uint32) error); ok {
		r2 = rf(rpcParameters, epoch)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSortedRevealedValues provides a mock function with given fields: rpcParameters, blockNumber, epoch
func (_m *UtilsCmdInterface) GetSortedRevealedValues(rpcParameters RPC.RPCParameters, blockNumber *big.Int, epoch uint32) (*types.RevealedDataMaps, error) {
	ret := _m.Called(rpcParameters, blockNumber, epoch)

	var r0 *types.RevealedDataMaps
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, uint32) (*types.RevealedDataMaps, error)); ok {
		return rf(rpcParameters, blockNumber, epoch)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, uint32) *types.RevealedDataMaps); ok {
		r0 = rf(rpcParameters, blockNumber, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RevealedDataMaps)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, *big.Int, uint32) error); ok {
		r1 = rf(rpcParameters, blockNumber, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakerInfo provides a mock function with given fields: rpcParameters, stakerId
func (_m *UtilsCmdInterface) GetStakerInfo(rpcParameters RPC.RPCParameters, stakerId uint32) error {
	ret := _m.Called(rpcParameters, stakerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32) error); ok {
		r0 = rf(rpcParameters, stakerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWaitTime provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetWaitTime() (int32, error) {
	ret := _m.Called()

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GiveSorted provides a mock function with given fields: rpcParameters, txnArgs, epoch, assetId, sortedStakers
func (_m *UtilsCmdInterface) GiveSorted(rpcParameters RPC.RPCParameters, txnArgs types.TransactionOptions, epoch uint32, assetId uint16, sortedStakers []*big.Int) error {
	ret := _m.Called(rpcParameters, txnArgs, epoch, assetId, sortedStakers)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions, uint32, uint16, []*big.Int) error); ok {
		r0 = rf(rpcParameters, txnArgs, epoch, assetId, sortedStakers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleBlock provides a mock function with given fields: rpcParameters, account, stakerId, header, config, commitParams, rogueData, backupNodeActionsToIgnore
func (_m *UtilsCmdInterface) HandleBlock(rpcParameters RPC.RPCParameters, account types.Account, stakerId uint32, header *coretypes.Header, config types.Configurations, commitParams *types.CommitParams, rogueData types.Rogue, backupNodeActionsToIgnore []string) {
	_m.Called(rpcParameters, account, stakerId, header, config, commitParams, rogueData, backupNodeActionsToIgnore)
}

// HandleClaimBounty provides a mock function with given fields: rpcParameters, config, account
func (_m *UtilsCmdInterface) HandleClaimBounty(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account) error {
	ret := _m.Called(rpcParameters, config, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account) error); ok {
		r0 = rf(rpcParameters, config, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleCommitState provides a mock function with given fields: rpcParameters, epoch, seed, commitParams, rogueData
func (_m *UtilsCmdInterface) HandleCommitState(rpcParameters RPC.RPCParameters, epoch uint32, seed []byte, commitParams *types.CommitParams, rogueData types.Rogue) (types.CommitData, error) {
	ret := _m.Called(rpcParameters, epoch, seed, commitParams, rogueData)

	var r0 types.CommitData
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32, []byte, *types.CommitParams, types.Rogue) (types.CommitData, error)); ok {
		return rf(rpcParameters, epoch, seed, commitParams, rogueData)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, uint32, []byte, *types.CommitParams, types.Rogue) types.CommitData); ok {
		r0 = rf(rpcParameters, epoch, seed, commitParams, rogueData)
	} else {
		r0 = ret.Get(0).(types.CommitData)
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, uint32, []byte, *types.CommitParams, types.Rogue) error); ok {
		r1 = rf(rpcParameters, epoch, seed, commitParams, rogueData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleDispute provides a mock function with given fields: rpcParameters, config, account, epoch, blockNumber, rogueData, backupNodeActionsToIgnore
func (_m *UtilsCmdInterface) HandleDispute(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, epoch uint32, blockNumber *big.Int, rogueData types.Rogue, backupNodeActionsToIgnore []string) error {
	ret := _m.Called(rpcParameters, config, account, epoch, blockNumber, rogueData, backupNodeActionsToIgnore)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *big.Int, types.Rogue, []string) error); ok {
		r0 = rf(rpcParameters, config, account, epoch, blockNumber, rogueData, backupNodeActionsToIgnore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleExit provides a mock function with given fields:
func (_m *UtilsCmdInterface) HandleExit() {
	_m.Called()
}

// HandleUnstakeLock provides a mock function with given fields: rpcParameters, account, configurations, stakerId
func (_m *UtilsCmdInterface) HandleUnstakeLock(rpcParameters RPC.RPCParameters, account types.Account, configurations types.Configurations, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(rpcParameters, account, configurations, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Account, types.Configurations, uint32) (common.Hash, error)); ok {
		return rf(rpcParameters, account, configurations, stakerId)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Account, types.Configurations, uint32) common.Hash); ok {
		r0 = rf(rpcParameters, account, configurations, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Account, types.Configurations, uint32) error); ok {
		r1 = rf(rpcParameters, account, configurations, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleWithdrawLock provides a mock function with given fields: rpcParameters, account, configurations, stakerId
func (_m *UtilsCmdInterface) HandleWithdrawLock(rpcParameters RPC.RPCParameters, account types.Account, configurations types.Configurations, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(rpcParameters, account, configurations, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Account, types.Configurations, uint32) (common.Hash, error)); ok {
		return rf(rpcParameters, account, configurations, stakerId)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Account, types.Configurations, uint32) common.Hash); ok {
		r0 = rf(rpcParameters, account, configurations, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Account, types.Configurations, uint32) error); ok {
		r1 = rf(rpcParameters, account, configurations, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportAccount provides a mock function with given fields:
func (_m *UtilsCmdInterface) ImportAccount() (accounts.Account, error) {
	ret := _m.Called()

	var r0 accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() (accounts.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() accounts.Account); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexRevealEventsOfCurrentEpoch provides a mock function with given fields: rpcParameters, blockNumber, epoch
func (_m *UtilsCmdInterface) IndexRevealEventsOfCurrentEpoch(rpcParameters RPC.RPCParameters, blockNumber *big.Int, epoch uint32) ([]types.RevealedStruct, error) {
	ret := _m.Called(rpcParameters, blockNumber, epoch)

	var r0 []types.RevealedStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, uint32) ([]types.RevealedStruct, error)); ok {
		return rf(rpcParameters, blockNumber, epoch)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, uint32) []types.RevealedStruct); ok {
		r0 = rf(rpcParameters, blockNumber, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RevealedStruct)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, *big.Int, uint32) error); ok {
		r1 = rf(rpcParameters, blockNumber, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitJobAndCollectionCache provides a mock function with given fields: rpcParameters
func (_m *UtilsCmdInterface) InitJobAndCollectionCache(rpcParameters RPC.RPCParameters) (*cache.JobsCache, *cache.CollectionsCache, *big.Int, error) {
	ret := _m.Called(rpcParameters)

	var r0 *cache.JobsCache
	var r1 *cache.CollectionsCache
	var r2 *big.Int
	var r3 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters) (*cache.JobsCache, *cache.CollectionsCache, *big.Int, error)); ok {
		return rf(rpcParameters)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters) *cache.JobsCache); ok {
		r0 = rf(rpcParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.JobsCache)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters) *cache.CollectionsCache); ok {
		r1 = rf(rpcParameters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cache.CollectionsCache)
		}
	}

	if rf, ok := ret.Get(2).(func(RPC.RPCParameters) *big.Int); ok {
		r2 = rf(rpcParameters)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*big.Int)
		}
	}

	if rf, ok := ret.Get(3).(func(RPC.RPCParameters) error); ok {
		r3 = rf(rpcParameters)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// InitiateCommit provides a mock function with given fields: rpcParameters, config, account, epoch, stakerId, latestHeader, commitParams, stateBuffer, rogueData
func (_m *UtilsCmdInterface) InitiateCommit(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, epoch uint32, stakerId uint32, latestHeader *coretypes.Header, commitParams *types.CommitParams, stateBuffer uint64, rogueData types.Rogue) error {
	ret := _m.Called(rpcParameters, config, account, epoch, stakerId, latestHeader, commitParams, stateBuffer, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, uint32, *coretypes.Header, *types.CommitParams, uint64, types.Rogue) error); ok {
		r0 = rf(rpcParameters, config, account, epoch, stakerId, latestHeader, commitParams, stateBuffer, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiatePropose provides a mock function with given fields: rpcParameters, config, account, epoch, staker, latestHeader, stateBuffer, rogueData
func (_m *UtilsCmdInterface) InitiatePropose(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, epoch uint32, staker bindings.StructsStaker, latestHeader *coretypes.Header, stateBuffer uint64, rogueData types.Rogue) error {
	ret := _m.Called(rpcParameters, config, account, epoch, staker, latestHeader, stateBuffer, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, bindings.StructsStaker, *coretypes.Header, uint64, types.Rogue) error); ok {
		r0 = rf(rpcParameters, config, account, epoch, staker, latestHeader, stateBuffer, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateReveal provides a mock function with given fields: rpcParameters, config, account, epoch, staker, latestHeader, stateBuffer, rogueData
func (_m *UtilsCmdInterface) InitiateReveal(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, epoch uint32, staker bindings.StructsStaker, latestHeader *coretypes.Header, stateBuffer uint64, rogueData types.Rogue) error {
	ret := _m.Called(rpcParameters, config, account, epoch, staker, latestHeader, stateBuffer, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, bindings.StructsStaker, *coretypes.Header, uint64, types.Rogue) error); ok {
		r0 = rf(rpcParameters, config, account, epoch, staker, latestHeader, stateBuffer, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateWithdraw provides a mock function with given fields: rpcParameters, txnOpts, stakerId
func (_m *UtilsCmdInterface) InitiateWithdraw(rpcParameters RPC.RPCParameters, txnOpts *bind.TransactOpts, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(rpcParameters, txnOpts, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *bind.TransactOpts, uint32) (common.Hash, error)); ok {
		return rf(rpcParameters, txnOpts, stakerId)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *bind.TransactOpts, uint32) common.Hash); ok {
		r0 = rf(rpcParameters, txnOpts, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, *bind.TransactOpts, uint32) error); ok {
		r1 = rf(rpcParameters, txnOpts, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsElectedProposer provides a mock function with given fields: proposer, currentStakerStake
func (_m *UtilsCmdInterface) IsElectedProposer(proposer types.ElectedProposer, currentStakerStake *big.Int) bool {
	ret := _m.Called(proposer, currentStakerStake)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.ElectedProposer, *big.Int) bool); ok {
		r0 = rf(proposer, currentStakerStake)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListAccounts provides a mock function with given fields:
func (_m *UtilsCmdInterface) ListAccounts() ([]accounts.Account, error) {
	ret := _m.Called()

	var r0 []accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]accounts.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []accounts.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeBlock provides a mock function with given fields: rpcParameters, blockNumber, epoch, rogueData
func (_m *UtilsCmdInterface) MakeBlock(rpcParameters RPC.RPCParameters, blockNumber *big.Int, epoch uint32, rogueData types.Rogue) ([]*big.Int, []uint16, *types.RevealedDataMaps, error) {
	ret := _m.Called(rpcParameters, blockNumber, epoch, rogueData)

	var r0 []*big.Int
	var r1 []uint16
	var r2 *types.RevealedDataMaps
	var r3 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, uint32, types.Rogue) ([]*big.Int, []uint16, *types.RevealedDataMaps, error)); ok {
		return rf(rpcParameters, blockNumber, epoch, rogueData)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *big.Int, uint32, types.Rogue) []*big.Int); ok {
		r0 = rf(rpcParameters, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, *big.Int, uint32, types.Rogue) []uint16); ok {
		r1 = rf(rpcParameters, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uint16)
		}
	}

	if rf, ok := ret.Get(2).(func(RPC.RPCParameters, *big.Int, uint32, types.Rogue) *types.RevealedDataMaps); ok {
		r2 = rf(rpcParameters, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*types.RevealedDataMaps)
		}
	}

	if rf, ok := ret.Get(3).(func(RPC.RPCParameters, *big.Int, uint32, types.Rogue) error); ok {
		r3 = rf(rpcParameters, blockNumber, epoch, rogueData)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ModifyCollectionStatus provides a mock function with given fields: rpcParameters, config, modifyCollectionInput
func (_m *UtilsCmdInterface) ModifyCollectionStatus(rpcParameters RPC.RPCParameters, config types.Configurations, modifyCollectionInput types.ModifyCollectionInput) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, modifyCollectionInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.ModifyCollectionInput) (common.Hash, error)); ok {
		return rf(rpcParameters, config, modifyCollectionInput)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.ModifyCollectionInput) common.Hash); ok {
		r0 = rf(rpcParameters, config, modifyCollectionInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.ModifyCollectionInput) error); ok {
		r1 = rf(rpcParameters, config, modifyCollectionInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Propose provides a mock function with given fields: rpcParameters, config, account, staker, epoch, latestHeader, stateBuffer, rogueData
func (_m *UtilsCmdInterface) Propose(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, staker bindings.StructsStaker, epoch uint32, latestHeader *coretypes.Header, stateBuffer uint64, rogueData types.Rogue) error {
	ret := _m.Called(rpcParameters, config, account, staker, epoch, latestHeader, stateBuffer, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, bindings.StructsStaker, uint32, *coretypes.Header, uint64, types.Rogue) error); ok {
		r0 = rf(rpcParameters, config, account, staker, epoch, latestHeader, stateBuffer, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetDispute provides a mock function with given fields: rpcParameters, txnOpts, epoch
func (_m *UtilsCmdInterface) ResetDispute(rpcParameters RPC.RPCParameters, txnOpts *bind.TransactOpts, epoch uint32) {
	_m.Called(rpcParameters, txnOpts, epoch)
}

// ResetUnstakeLock provides a mock function with given fields: rpcParameters, config, extendLockInput
func (_m *UtilsCmdInterface) ResetUnstakeLock(rpcParameters RPC.RPCParameters, config types.Configurations, extendLockInput types.ExtendLockInput) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, extendLockInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.ExtendLockInput) (common.Hash, error)); ok {
		return rf(rpcParameters, config, extendLockInput)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.ExtendLockInput) common.Hash); ok {
		r0 = rf(rpcParameters, config, extendLockInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.ExtendLockInput) error); ok {
		r1 = rf(rpcParameters, config, extendLockInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reveal provides a mock function with given fields: rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitData, signature
func (_m *UtilsCmdInterface) Reveal(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, epoch uint32, latestHeader *coretypes.Header, stateBuffer uint64, commitData types.CommitData, signature []byte) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitData, signature)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *coretypes.Header, uint64, types.CommitData, []byte) (common.Hash, error)); ok {
		return rf(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitData, signature)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *coretypes.Header, uint64, types.CommitData, []byte) common.Hash); ok {
		r0 = rf(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitData, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *coretypes.Header, uint64, types.CommitData, []byte) error); ok {
		r1 = rf(rpcParameters, config, account, epoch, latestHeader, stateBuffer, commitData, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfig provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) SetConfig(flagSet *pflag.FlagSet) error {
	ret := _m.Called(flagSet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) error); ok {
		r0 = rf(flagSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDelegation provides a mock function with given fields: rpcParameters, config, delegationInput
func (_m *UtilsCmdInterface) SetDelegation(rpcParameters RPC.RPCParameters, config types.Configurations, delegationInput types.SetDelegationInput) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, delegationInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.SetDelegationInput) (common.Hash, error)); ok {
		return rf(rpcParameters, config, delegationInput)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.SetDelegationInput) common.Hash); ok {
		r0 = rf(rpcParameters, config, delegationInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.SetDelegationInput) error); ok {
		r1 = rf(rpcParameters, config, delegationInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakeCoins provides a mock function with given fields: rpcParameters, txnArgs
func (_m *UtilsCmdInterface) StakeCoins(rpcParameters RPC.RPCParameters, txnArgs types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(rpcParameters, txnArgs)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions) (common.Hash, error)); ok {
		return rf(rpcParameters, txnArgs)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.TransactionOptions) common.Hash); ok {
		r0 = rf(rpcParameters, txnArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.TransactionOptions) error); ok {
		r1 = rf(rpcParameters, txnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreBountyId provides a mock function with given fields: rpcParameters, account
func (_m *UtilsCmdInterface) StoreBountyId(rpcParameters RPC.RPCParameters, account types.Account) error {
	ret := _m.Called(rpcParameters, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Account) error); ok {
		r0 = rf(rpcParameters, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transfer provides a mock function with given fields: rpcParameters, config, transferInput
func (_m *UtilsCmdInterface) Transfer(rpcParameters RPC.RPCParameters, config types.Configurations, transferInput types.TransferInput) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, transferInput)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.TransferInput) (common.Hash, error)); ok {
		return rf(rpcParameters, config, transferInput)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.TransferInput) common.Hash); ok {
		r0 = rf(rpcParameters, config, transferInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.TransferInput) error); ok {
		r1 = rf(rpcParameters, config, transferInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockWithdraw provides a mock function with given fields: rpcParameters, txnOpts, stakerId
func (_m *UtilsCmdInterface) UnlockWithdraw(rpcParameters RPC.RPCParameters, txnOpts *bind.TransactOpts, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(rpcParameters, txnOpts, stakerId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *bind.TransactOpts, uint32) (common.Hash, error)); ok {
		return rf(rpcParameters, txnOpts, stakerId)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, *bind.TransactOpts, uint32) common.Hash); ok {
		r0 = rf(rpcParameters, txnOpts, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, *bind.TransactOpts, uint32) error); ok {
		r1 = rf(rpcParameters, txnOpts, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unstake provides a mock function with given fields: rpcParameters, config, input
func (_m *UtilsCmdInterface) Unstake(rpcParameters RPC.RPCParameters, config types.Configurations, input types.UnstakeInput) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, input)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.UnstakeInput) (common.Hash, error)); ok {
		return rf(rpcParameters, config, input)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.UnstakeInput) common.Hash); ok {
		r0 = rf(rpcParameters, config, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.UnstakeInput) error); ok {
		r1 = rf(rpcParameters, config, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollection provides a mock function with given fields: rpcParameters, config, collectionInput, collectionId
func (_m *UtilsCmdInterface) UpdateCollection(rpcParameters RPC.RPCParameters, config types.Configurations, collectionInput types.CreateCollectionInput, collectionId uint16) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, collectionInput, collectionId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateCollectionInput, uint16) (common.Hash, error)); ok {
		return rf(rpcParameters, config, collectionInput, collectionId)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateCollectionInput, uint16) common.Hash); ok {
		r0 = rf(rpcParameters, config, collectionInput, collectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.CreateCollectionInput, uint16) error); ok {
		r1 = rf(rpcParameters, config, collectionInput, collectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommission provides a mock function with given fields: rpcParameters, config, updateCommissionInput
func (_m *UtilsCmdInterface) UpdateCommission(rpcParameters RPC.RPCParameters, config types.Configurations, updateCommissionInput types.UpdateCommissionInput) error {
	ret := _m.Called(rpcParameters, config, updateCommissionInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.UpdateCommissionInput) error); ok {
		r0 = rf(rpcParameters, config, updateCommissionInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJob provides a mock function with given fields: rpcParameters, config, jobInput, jobId
func (_m *UtilsCmdInterface) UpdateJob(rpcParameters RPC.RPCParameters, config types.Configurations, jobInput types.CreateJobInput, jobId uint16) (common.Hash, error) {
	ret := _m.Called(rpcParameters, config, jobInput, jobId)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateJobInput, uint16) (common.Hash, error)); ok {
		return rf(rpcParameters, config, jobInput, jobId)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.CreateJobInput, uint16) common.Hash); ok {
		r0 = rf(rpcParameters, config, jobInput, jobId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, types.Configurations, types.CreateJobInput, uint16) error); ok {
		r1 = rf(rpcParameters, config, jobInput, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: rpcParameters, config, account, stakerId, commitParams, rogueData, backupNodeActionsToIgnore
func (_m *UtilsCmdInterface) Vote(rpcParameters RPC.RPCParameters, config types.Configurations, account types.Account, stakerId uint32, commitParams *types.CommitParams, rogueData types.Rogue, backupNodeActionsToIgnore []string) error {
	ret := _m.Called(rpcParameters, config, account, stakerId, commitParams, rogueData, backupNodeActionsToIgnore)

	var r0 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, types.Configurations, types.Account, uint32, *types.CommitParams, types.Rogue, []string) error); ok {
		r0 = rf(rpcParameters, config, account, stakerId, commitParams, rogueData, backupNodeActionsToIgnore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForAppropriateState provides a mock function with given fields: rpcParameter, action, states
func (_m *UtilsCmdInterface) WaitForAppropriateState(rpcParameter RPC.RPCParameters, action string, states ...int) (uint32, error) {
	_va := make([]interface{}, len(states))
	for _i := range states {
		_va[_i] = states[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rpcParameter, action)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, string, ...int) (uint32, error)); ok {
		return rf(rpcParameter, action, states...)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, string, ...int) uint32); ok {
		r0 = rf(rpcParameter, action, states...)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, string, ...int) error); ok {
		r1 = rf(rpcParameter, action, states...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitIfCommitState provides a mock function with given fields: rpcParameter, action
func (_m *UtilsCmdInterface) WaitIfCommitState(rpcParameter RPC.RPCParameters, action string) (uint32, error) {
	ret := _m.Called(rpcParameter, action)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, string) (uint32, error)); ok {
		return rf(rpcParameter, action)
	}
	if rf, ok := ret.Get(0).(func(RPC.RPCParameters, string) uint32); ok {
		r0 = rf(rpcParameter, action)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(RPC.RPCParameters, string) error); ok {
		r1 = rf(rpcParameter, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUtilsCmdInterface creates a new instance of UtilsCmdInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUtilsCmdInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UtilsCmdInterface {
	mock := &UtilsCmdInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
