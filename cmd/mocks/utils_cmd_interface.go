// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	big "math/big"

	accounts "github.com/ethereum/go-ethereum/accounts"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	bindings "razor/pkg/bindings"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	pflag "github.com/spf13/pflag"

	types "razor/core/types"
)

// UtilsCmdInterface is an autogenerated mock type for the UtilsCmdInterface type
type UtilsCmdInterface struct {
	mock.Mock
}

// Approve provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) Approve(_a0 types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(_a0)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) common.Hash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.TransactionOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApproveUnstake provides a mock function with given fields: client, staker, txnArgs
func (_m *UtilsCmdInterface) ApproveUnstake(client *ethclient.Client, staker bindings.StructsStaker, txnArgs types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(client, staker, txnArgs)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, bindings.StructsStaker, types.TransactionOptions) common.Hash); ok {
		r0 = rf(client, staker, txnArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, bindings.StructsStaker, types.TransactionOptions) error); ok {
		r1 = rf(client, staker, txnArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignAmountInWei provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) AssignAmountInWei(_a0 *pflag.FlagSet) (*big.Int, error) {
	ret := _m.Called(_a0)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) *big.Int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pflag.FlagSet) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoUnstakeAndWithdraw provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *UtilsCmdInterface) AutoUnstakeAndWithdraw(_a0 *ethclient.Client, _a1 types.Account, _a2 *big.Int, _a3 types.Configurations) {
	_m.Called(_a0, _a1, _a2, _a3)
}

// AutoWithdraw provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) AutoWithdraw(_a0 types.TransactionOptions, _a1 uint32) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.TransactionOptions, uint32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CalculateSecret provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) CalculateSecret(_a0 types.Account, _a1 uint32) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(types.Account, uint32) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Account, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCurrentStatus provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) CheckCurrentStatus(_a0 *ethclient.Client, _a1 uint16) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint16) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckDisputeForIds provides a mock function with given fields: client, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds
func (_m *UtilsCmdInterface) CheckDisputeForIds(client *ethclient.Client, transactionOpts types.TransactionOptions, epoch uint32, blockIndex uint8, idsInProposedBlock []uint16, revealedCollectionIds []uint16) (*coretypes.Transaction, error) {
	ret := _m.Called(client, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)

	var r0 *coretypes.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.TransactionOptions, uint32, uint8, []uint16, []uint16) *coretypes.Transaction); ok {
		r0 = rf(client, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.TransactionOptions, uint32, uint8, []uint16, []uint16) error); ok {
		r1 = rf(client, transactionOpts, epoch, blockIndex, idsInProposedBlock, revealedCollectionIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimBlockReward provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ClaimBlockReward(_a0 types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(_a0)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) common.Hash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.TransactionOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimBounty provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) ClaimBounty(_a0 types.Configurations, _a1 *ethclient.Client, _a2 types.RedeemBountyInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.RedeemBountyInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Configurations, *ethclient.Client, types.RedeemBountyInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimCommission provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) ClaimCommission(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// Commit provides a mock function with given fields: client, config, account, epoch, seed, root
func (_m *UtilsCmdInterface) Commit(client *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, seed []byte, root [32]byte) (common.Hash, error) {
	ret := _m.Called(client, config, account, epoch, seed, root)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, []byte, [32]byte) common.Hash); ok {
		r0 = rf(client, config, account, epoch, seed, root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.Account, uint32, []byte, [32]byte) error); ok {
		r1 = rf(client, config, account, epoch, seed, root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) Create(_a0 string) (accounts.Account, error) {
	ret := _m.Called(_a0)

	var r0 accounts.Account
	if rf, ok := ret.Get(0).(func(string) accounts.Account); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCollection provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) CreateCollection(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.CreateCollectionInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) CreateJob(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.CreateJobInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateJobInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateJobInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delegate provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) Delegate(_a0 types.TransactionOptions, _a1 uint32) (common.Hash, error) {
	ret := _m.Called(_a0, _a1)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.TransactionOptions, uint32) common.Hash); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.TransactionOptions, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dispute provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7
func (_m *UtilsCmdInterface) Dispute(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.Account, _a3 uint32, _a4 uint8, _a5 bindings.StructsBlock, _a6 uint16, _a7 []uint32) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, uint8, bindings.StructsBlock, uint16, []uint32) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteClaimBounty provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteClaimBounty(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteCollectionList provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteCollectionList(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteCreate provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteCreate(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteCreateCollection provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteCreateCollection(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteCreateJob provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteCreateJob(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteDelegate provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteDelegate(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteExtendLock provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteExtendLock(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteImport provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteImport(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteInitiateWithdraw provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteInitiateWithdraw(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteJobList provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteJobList(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteListAccounts provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteListAccounts(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteModifyAssetStatus provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteModifyAssetStatus(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteSetDelegation provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteSetDelegation(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteStake provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteStake(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteStakerinfo provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteStakerinfo(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteTransfer provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteTransfer(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteUnlockWithdraw provides a mock function with given fields: set
func (_m *UtilsCmdInterface) ExecuteUnlockWithdraw(set *pflag.FlagSet) {
	_m.Called(set)
}

// ExecuteUnstake provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteUnstake(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteUpdateCollection provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteUpdateCollection(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteUpdateCommission provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteUpdateCommission(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteUpdateJob provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteUpdateJob(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// ExecuteVote provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) ExecuteVote(_a0 *pflag.FlagSet) {
	_m.Called(_a0)
}

// GenerateTreeRevealData provides a mock function with given fields: merkleTree, commitData
func (_m *UtilsCmdInterface) GenerateTreeRevealData(merkleTree [][][]byte, commitData types.CommitData) bindings.StructsMerkleTree {
	ret := _m.Called(merkleTree, commitData)

	var r0 bindings.StructsMerkleTree
	if rf, ok := ret.Get(0).(func([][][]byte, types.CommitData) bindings.StructsMerkleTree); ok {
		r0 = rf(merkleTree, commitData)
	} else {
		r0 = ret.Get(0).(bindings.StructsMerkleTree)
	}

	return r0
}

// GetBiggestStakeAndId provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) GetBiggestStakeAndId(_a0 *ethclient.Client, _a1 string, _a2 uint32) (*big.Int, uint32, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string, uint32) *big.Int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 uint32
	if rf, ok := ret.Get(1).(func(*ethclient.Client, string, uint32) uint32); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*ethclient.Client, string, uint32) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBufferPercent provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetBufferPercent() (int32, error) {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIdPositionInBlock provides a mock function with given fields: client, leafId, proposedBlock
func (_m *UtilsCmdInterface) GetCollectionIdPositionInBlock(client *ethclient.Client, leafId uint16, proposedBlock bindings.StructsBlock) *big.Int {
	ret := _m.Called(client, leafId, proposedBlock)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint16, bindings.StructsBlock) *big.Int); ok {
		r0 = rf(client, leafId, proposedBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetCollectionList provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetCollectionList(_a0 *ethclient.Client) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommitDataFileName provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetCommitDataFileName(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigData provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetConfigData() (types.Configurations, error) {
	ret := _m.Called()

	var r0 types.Configurations
	if rf, ok := ret.Get(0).(func() types.Configurations); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.Configurations)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpochAndState provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetEpochAndState(_a0 *ethclient.Client) (uint32, int64, error) {
	ret := _m.Called(_a0)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*ethclient.Client) int64); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*ethclient.Client) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGasLimit provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasLimit() (float32, error) {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPrice provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetGasPrice() (int32, error) {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIteration provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) GetIteration(_a0 *ethclient.Client, _a1 types.ElectedProposer) int {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.ElectedProposer) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetJobList provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetJobList(_a0 *ethclient.Client) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastProposedEpoch provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) GetLastProposedEpoch(_a0 *ethclient.Client, _a1 *big.Int, _a2 uint32) (uint32, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32) uint32); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocalMediansData provides a mock function with given fields: client, account, epoch, blockNumber, rogueData
func (_m *UtilsCmdInterface) GetLocalMediansData(client *ethclient.Client, account types.Account, epoch uint32, blockNumber *big.Int, rogueData types.Rogue) ([]uint32, []uint16, *types.RevealedDataMaps, error) {
	ret := _m.Called(client, account, epoch, blockNumber, rogueData)

	var r0 []uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, uint32, *big.Int, types.Rogue) []uint32); ok {
		r0 = rf(client, account, epoch, blockNumber, rogueData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	var r1 []uint16
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Account, uint32, *big.Int, types.Rogue) []uint16); ok {
		r1 = rf(client, account, epoch, blockNumber, rogueData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uint16)
		}
	}

	var r2 *types.RevealedDataMaps
	if rf, ok := ret.Get(2).(func(*ethclient.Client, types.Account, uint32, *big.Int, types.Rogue) *types.RevealedDataMaps); ok {
		r2 = rf(client, account, epoch, blockNumber, rogueData)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*types.RevealedDataMaps)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*ethclient.Client, types.Account, uint32, *big.Int, types.Rogue) error); ok {
		r3 = rf(client, account, epoch, blockNumber, rogueData)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetLogLevel provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetLogLevel() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedianDataFileName provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) GetMedianDataFileName(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplier provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetMultiplier() (float32, error) {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvider provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetProvider() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSalt provides a mock function with given fields: client, epoch
func (_m *UtilsCmdInterface) GetSalt(client *ethclient.Client, epoch uint32) ([32]byte, error) {
	ret := _m.Called(client, epoch)

	var r0 [32]byte
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) [32]byte); ok {
		r0 = rf(client, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint32) error); ok {
		r1 = rf(client, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedRevealedValues provides a mock function with given fields: client, blockNumber, epoch
func (_m *UtilsCmdInterface) GetSortedRevealedValues(client *ethclient.Client, blockNumber *big.Int, epoch uint32) (*types.RevealedDataMaps, error) {
	ret := _m.Called(client, blockNumber, epoch)

	var r0 *types.RevealedDataMaps
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32) *types.RevealedDataMaps); ok {
		r0 = rf(client, blockNumber, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RevealedDataMaps)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, uint32) error); ok {
		r1 = rf(client, blockNumber, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakerInfo provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) GetStakerInfo(_a0 *ethclient.Client, _a1 uint32) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWaitTime provides a mock function with given fields:
func (_m *UtilsCmdInterface) GetWaitTime() (int32, error) {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GiveSorted provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *UtilsCmdInterface) GiveSorted(_a0 *ethclient.Client, _a1 *bindings.BlockManager, _a2 *bind.TransactOpts, _a3 uint32, _a4 uint16, _a5 []uint32) {
	_m.Called(_a0, _a1, _a2, _a3, _a4, _a5)
}

// HandleBlock provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *UtilsCmdInterface) HandleBlock(_a0 *ethclient.Client, _a1 types.Account, _a2 *big.Int, _a3 types.Configurations, _a4 types.Rogue) {
	_m.Called(_a0, _a1, _a2, _a3, _a4)
}

// HandleCommitState provides a mock function with given fields: client, epoch, seed, rogueData
func (_m *UtilsCmdInterface) HandleCommitState(client *ethclient.Client, epoch uint32, seed []byte, rogueData types.Rogue) (types.CommitData, error) {
	ret := _m.Called(client, epoch, seed, rogueData)

	var r0 types.CommitData
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32, []byte, types.Rogue) types.CommitData); ok {
		r0 = rf(client, epoch, seed, rogueData)
	} else {
		r0 = ret.Get(0).(types.CommitData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint32, []byte, types.Rogue) error); ok {
		r1 = rf(client, epoch, seed, rogueData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleDispute provides a mock function with given fields: client, config, account, epoch, blockNumber, rogueData
func (_m *UtilsCmdInterface) HandleDispute(client *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, blockNumber *big.Int, rogueData types.Rogue) error {
	ret := _m.Called(client, config, account, epoch, blockNumber, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, *big.Int, types.Rogue) error); ok {
		r0 = rf(client, config, account, epoch, blockNumber, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleExit provides a mock function with given fields:
func (_m *UtilsCmdInterface) HandleExit() {
	_m.Called()
}

// HandleRevealState provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) HandleRevealState(_a0 *ethclient.Client, _a1 bindings.StructsStaker, _a2 uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, bindings.StructsStaker, uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleUnstakeLock provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *UtilsCmdInterface) HandleUnstakeLock(_a0 *ethclient.Client, _a1 types.Account, _a2 types.Configurations, _a3 uint32) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, types.Configurations, uint32) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Account, types.Configurations, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleWithdrawLock provides a mock function with given fields: client, account, configurations, stakerId
func (_m *UtilsCmdInterface) HandleWithdrawLock(client *ethclient.Client, account types.Account, configurations types.Configurations, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(client, account, configurations, stakerId)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Account, types.Configurations, uint32) common.Hash); ok {
		r0 = rf(client, account, configurations, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Account, types.Configurations, uint32) error); ok {
		r1 = rf(client, account, configurations, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportAccount provides a mock function with given fields:
func (_m *UtilsCmdInterface) ImportAccount() (accounts.Account, error) {
	ret := _m.Called()

	var r0 accounts.Account
	if rf, ok := ret.Get(0).(func() accounts.Account); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexRevealEventsOfCurrentEpoch provides a mock function with given fields: client, blockNumber, epoch
func (_m *UtilsCmdInterface) IndexRevealEventsOfCurrentEpoch(client *ethclient.Client, blockNumber *big.Int, epoch uint32) ([]types.RevealedStruct, error) {
	ret := _m.Called(client, blockNumber, epoch)

	var r0 []types.RevealedStruct
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32) []types.RevealedStruct); ok {
		r0 = rf(client, blockNumber, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RevealedStruct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, uint32) error); ok {
		r1 = rf(client, blockNumber, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InfluencedMedian provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) InfluencedMedian(_a0 []*big.Int, _a1 *big.Int) *big.Int {
	ret := _m.Called(_a0, _a1)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func([]*big.Int, *big.Int) *big.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// InitiateCommit provides a mock function with given fields: client, config, account, epoch, stakerId, rogueData
func (_m *UtilsCmdInterface) InitiateCommit(client *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, stakerId uint32, rogueData types.Rogue) error {
	ret := _m.Called(client, config, account, epoch, stakerId, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, uint32, types.Rogue) error); ok {
		r0 = rf(client, config, account, epoch, stakerId, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateReveal provides a mock function with given fields: client, config, account, epoch, staker, rogueData
func (_m *UtilsCmdInterface) InitiateReveal(client *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, staker bindings.StructsStaker, rogueData types.Rogue) error {
	ret := _m.Called(client, config, account, epoch, staker, rogueData)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, bindings.StructsStaker, types.Rogue) error); ok {
		r0 = rf(client, config, account, epoch, staker, rogueData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateWithdraw provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) InitiateWithdraw(_a0 *ethclient.Client, _a1 *bind.TransactOpts, _a2 uint32) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsElectedProposer provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) IsElectedProposer(_a0 types.ElectedProposer, _a1 *big.Int) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.ElectedProposer, *big.Int) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListAccounts provides a mock function with given fields:
func (_m *UtilsCmdInterface) ListAccounts() ([]accounts.Account, error) {
	ret := _m.Called()

	var r0 []accounts.Account
	if rf, ok := ret.Get(0).(func() []accounts.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeBlock provides a mock function with given fields: client, blockNumber, epoch, rogueData
func (_m *UtilsCmdInterface) MakeBlock(client *ethclient.Client, blockNumber *big.Int, epoch uint32, rogueData types.Rogue) ([]uint32, []uint16, *types.RevealedDataMaps, error) {
	ret := _m.Called(client, blockNumber, epoch, rogueData)

	var r0 []uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) []uint32); ok {
		r0 = rf(client, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	var r1 []uint16
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) []uint16); ok {
		r1 = rf(client, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]uint16)
		}
	}

	var r2 *types.RevealedDataMaps
	if rf, ok := ret.Get(2).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) *types.RevealedDataMaps); ok {
		r2 = rf(client, blockNumber, epoch, rogueData)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*types.RevealedDataMaps)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*ethclient.Client, *big.Int, uint32, types.Rogue) error); ok {
		r3 = rf(client, blockNumber, epoch, rogueData)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ModifyAssetStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) ModifyAssetStatus(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.ModifyAssetInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.ModifyAssetInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.ModifyAssetInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Propose provides a mock function with given fields: client, config, account, staker, epoch, blockNumber, rogueData
func (_m *UtilsCmdInterface) Propose(client *ethclient.Client, config types.Configurations, account types.Account, staker bindings.StructsStaker, epoch uint32, blockNumber *big.Int, rogueData types.Rogue) (common.Hash, error) {
	ret := _m.Called(client, config, account, staker, epoch, blockNumber, rogueData)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, bindings.StructsStaker, uint32, *big.Int, types.Rogue) common.Hash); ok {
		r0 = rf(client, config, account, staker, epoch, blockNumber, rogueData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.Account, bindings.StructsStaker, uint32, *big.Int, types.Rogue) error); ok {
		r1 = rf(client, config, account, staker, epoch, blockNumber, rogueData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetUnstakeLock provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) ResetUnstakeLock(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.ExtendLockInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.ExtendLockInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.ExtendLockInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reveal provides a mock function with given fields: client, config, account, epoch, commitData, secret
func (_m *UtilsCmdInterface) Reveal(client *ethclient.Client, config types.Configurations, account types.Account, epoch uint32, commitData types.CommitData, secret []byte) (common.Hash, error) {
	ret := _m.Called(client, config, account, epoch, commitData, secret)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.Account, uint32, types.CommitData, []byte) common.Hash); ok {
		r0 = rf(client, config, account, epoch, commitData, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.Account, uint32, types.CommitData, []byte) error); ok {
		r1 = rf(client, config, account, epoch, commitData, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfig provides a mock function with given fields: flagSet
func (_m *UtilsCmdInterface) SetConfig(flagSet *pflag.FlagSet) error {
	ret := _m.Called(flagSet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet) error); ok {
		r0 = rf(flagSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDelegation provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) SetDelegation(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.SetDelegationInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.SetDelegationInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.SetDelegationInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakeCoins provides a mock function with given fields: _a0
func (_m *UtilsCmdInterface) StakeCoins(_a0 types.TransactionOptions) (common.Hash, error) {
	ret := _m.Called(_a0)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) common.Hash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.TransactionOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) Transfer(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.TransferInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.TransferInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.TransferInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockWithdraw provides a mock function with given fields: client, txnOpts, stakerId
func (_m *UtilsCmdInterface) UnlockWithdraw(client *ethclient.Client, txnOpts *bind.TransactOpts, stakerId uint32) (common.Hash, error) {
	ret := _m.Called(client, txnOpts, stakerId)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32) common.Hash); ok {
		r0 = rf(client, txnOpts, stakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32) error); ok {
		r1 = rf(client, txnOpts, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unstake provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) Unstake(_a0 types.Configurations, _a1 *ethclient.Client, _a2 types.UnstakeInput) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.UnstakeInput) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Configurations, *ethclient.Client, types.UnstakeInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollection provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *UtilsCmdInterface) UpdateCollection(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.CreateCollectionInput, _a3 uint16) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput, uint16) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateCollectionInput, uint16) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommission provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) UpdateCommission(_a0 types.Configurations, _a1 *ethclient.Client, _a2 types.UpdateCommissionInput) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Configurations, *ethclient.Client, types.UpdateCommissionInput) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJob provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *UtilsCmdInterface) UpdateJob(_a0 *ethclient.Client, _a1 types.Configurations, _a2 types.CreateJobInput, _a3 uint16) (common.Hash, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations, types.CreateJobInput, uint16) common.Hash); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, types.Configurations, types.CreateJobInput, uint16) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *UtilsCmdInterface) Vote(_a0 context.Context, _a1 types.Configurations, _a2 *ethclient.Client, _a3 types.Rogue, _a4 types.Account) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Configurations, *ethclient.Client, types.Rogue, types.Account) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForAppropriateState provides a mock function with given fields: _a0, _a1, _a2
func (_m *UtilsCmdInterface) WaitForAppropriateState(_a0 *ethclient.Client, _a1 string, _a2 ...int) (uint32, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string, ...int) uint32); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, string, ...int) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitIfCommitState provides a mock function with given fields: _a0, _a1
func (_m *UtilsCmdInterface) WaitIfCommitState(_a0 *ethclient.Client, _a1 string) (uint32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
