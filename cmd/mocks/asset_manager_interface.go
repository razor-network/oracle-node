// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	bindings "razor/pkg/bindings"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// AssetManagerInterface is an autogenerated mock type for the AssetManagerInterface type
type AssetManagerInterface struct {
	mock.Mock
}

// CreateCollection provides a mock function with given fields: client, opts, tolerance, power, occurrence, aggregationMethod, jobIDs, name
func (_m *AssetManagerInterface) CreateCollection(client *ethclient.Client, opts *bind.TransactOpts, tolerance uint32, power int8, occurrence uint16, aggregationMethod uint32, jobIDs []uint16, name string) (*types.Transaction, error) {
	ret := _m.Called(client, opts, tolerance, power, occurrence, aggregationMethod, jobIDs, name)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, int8, uint16, uint32, []uint16, string) *types.Transaction); ok {
		r0 = rf(client, opts, tolerance, power, occurrence, aggregationMethod, jobIDs, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, int8, uint16, uint32, []uint16, string) error); ok {
		r1 = rf(client, opts, tolerance, power, occurrence, aggregationMethod, jobIDs, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMulJob provides a mock function with given fields: client, opts, mulJobs
func (_m *AssetManagerInterface) CreateMulJob(client *ethclient.Client, opts *bind.TransactOpts, mulJobs []bindings.StructsJob) (*types.Transaction, error) {
	ret := _m.Called(client, opts, mulJobs)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, []bindings.StructsJob) *types.Transaction); ok {
		r0 = rf(client, opts, mulJobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, []bindings.StructsJob) error); ok {
		r1 = rf(client, opts, mulJobs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveStatus provides a mock function with given fields: client, opts, id
func (_m *AssetManagerInterface) GetActiveStatus(client *ethclient.Client, opts *bind.CallOpts, id uint16) (bool, error) {
	ret := _m.Called(client, opts, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint16) bool); ok {
		r0 = rf(client, opts, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint16) error); ok {
		r1 = rf(client, opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCollectionStatus provides a mock function with given fields: client, opts, assetStatus, id
func (_m *AssetManagerInterface) SetCollectionStatus(client *ethclient.Client, opts *bind.TransactOpts, assetStatus bool, id uint16) (*types.Transaction, error) {
	ret := _m.Called(client, opts, assetStatus, id)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, bool, uint16) *types.Transaction); ok {
		r0 = rf(client, opts, assetStatus, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, bool, uint16) error); ok {
		r1 = rf(client, opts, assetStatus, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollection provides a mock function with given fields: client, opts, collectionId, tolerance, aggregationMethod, power, jobIds
func (_m *AssetManagerInterface) UpdateCollection(client *ethclient.Client, opts *bind.TransactOpts, collectionId uint16, tolerance uint32, aggregationMethod uint32, power int8, jobIds []uint16) (*types.Transaction, error) {
	ret := _m.Called(client, opts, collectionId, tolerance, aggregationMethod, power, jobIds)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint16, uint32, uint32, int8, []uint16) *types.Transaction); ok {
		r0 = rf(client, opts, collectionId, tolerance, aggregationMethod, power, jobIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint16, uint32, uint32, int8, []uint16) error); ok {
		r1 = rf(client, opts, collectionId, tolerance, aggregationMethod, power, jobIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJob provides a mock function with given fields: client, opts, jobId, weight, power, selectorType, selector, url
func (_m *AssetManagerInterface) UpdateJob(client *ethclient.Client, opts *bind.TransactOpts, jobId uint16, weight uint8, power int8, selectorType uint8, selector string, url string) (*types.Transaction, error) {
	ret := _m.Called(client, opts, jobId, weight, power, selectorType, selector, url)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint16, uint8, int8, uint8, string, string) *types.Transaction); ok {
		r0 = rf(client, opts, jobId, weight, power, selectorType, selector, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint16, uint8, int8, uint8, string, string) error); ok {
		r1 = rf(client, opts, jobId, weight, power, selectorType, selector, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
