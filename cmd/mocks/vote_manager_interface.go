// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	bindings "razor/pkg/bindings"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// VoteManagerInterface is an autogenerated mock type for the VoteManagerInterface type
type VoteManagerInterface struct {
	mock.Mock
}

// Commit provides a mock function with given fields: client, txnOpts, epoch, commitment
func (_m *VoteManagerInterface) Commit(client *ethclient.Client, txnOpts *bind.TransactOpts, epoch uint32, commitment [32]byte) (*types.Transaction, error) {
	ret := _m.Called(client, txnOpts, epoch, commitment)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, [32]byte) *types.Transaction); ok {
		r0 = rf(client, txnOpts, epoch, commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, [32]byte) error); ok {
		r1 = rf(client, txnOpts, epoch, commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reveal provides a mock function with given fields: client, txnOpts, epoch, tree, secret
func (_m *VoteManagerInterface) Reveal(client *ethclient.Client, txnOpts *bind.TransactOpts, epoch uint32, tree bindings.StructsMerkleTree, secret [32]byte) (*types.Transaction, error) {
	ret := _m.Called(client, txnOpts, epoch, tree, secret)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, bindings.StructsMerkleTree, [32]byte) *types.Transaction); ok {
		r0 = rf(client, txnOpts, epoch, tree, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, bindings.StructsMerkleTree, [32]byte) error); ok {
		r1 = rf(client, txnOpts, epoch, tree, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
