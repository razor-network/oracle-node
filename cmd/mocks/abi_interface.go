// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	abi "github.com/ethereum/go-ethereum/accounts/abi"

	mock "github.com/stretchr/testify/mock"
)

// AbiInterface is an autogenerated mock type for the AbiInterface type
type AbiInterface struct {
	mock.Mock
}

// Unpack provides a mock function with given fields: _a0, name, data
func (_m *AbiInterface) Unpack(_a0 abi.ABI, name string, data []byte) ([]interface{}, error) {
	ret := _m.Called(_a0, name, data)

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(abi.ABI, string, []byte) ([]interface{}, error)); ok {
		return rf(_a0, name, data)
	}
	if rf, ok := ret.Get(0).(func(abi.ABI, string, []byte) []interface{}); ok {
		r0 = rf(_a0, name, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(abi.ABI, string, []byte) error); ok {
		r1 = rf(_a0, name, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAbiInterface creates a new instance of AbiInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAbiInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AbiInterface {
	mock := &AbiInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
