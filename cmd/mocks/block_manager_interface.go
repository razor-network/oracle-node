// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	big "math/big"
	bindings "razor/pkg/bindings"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	common "github.com/ethereum/go-ethereum/common"

	coretypes "razor/core/types"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// BlockManagerInterface is an autogenerated mock type for the BlockManagerInterface type
type BlockManagerInterface struct {
	mock.Mock
}

// ClaimBlockReward provides a mock function with given fields: client, opts
func (_m *BlockManagerInterface) ClaimBlockReward(client *ethclient.Client, opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(client, opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(client, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts) error); ok {
		r1 = rf(client, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisputeBiggestStakeProposed provides a mock function with given fields: client, opts, epoch, blockIndex, correctBiggestStakerId
func (_m *BlockManagerInterface) DisputeBiggestStakeProposed(client *ethclient.Client, opts *bind.TransactOpts, epoch uint32, blockIndex uint8, correctBiggestStakerId uint32) (*types.Transaction, error) {
	ret := _m.Called(client, opts, epoch, blockIndex, correctBiggestStakerId)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, uint32) *types.Transaction); ok {
		r0 = rf(client, opts, epoch, blockIndex, correctBiggestStakerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, uint32) error); ok {
		r1 = rf(client, opts, epoch, blockIndex, correctBiggestStakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisputeCollectionIdShouldBeAbsent provides a mock function with given fields: client, opts, epoch, blockIndex, id, positionOfCollectionInBlock
func (_m *BlockManagerInterface) DisputeCollectionIdShouldBeAbsent(client *ethclient.Client, opts *bind.TransactOpts, epoch uint32, blockIndex uint8, id uint16, positionOfCollectionInBlock *big.Int) (*types.Transaction, error) {
	ret := _m.Called(client, opts, epoch, blockIndex, id, positionOfCollectionInBlock)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, uint16, *big.Int) *types.Transaction); ok {
		r0 = rf(client, opts, epoch, blockIndex, id, positionOfCollectionInBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, uint16, *big.Int) error); ok {
		r1 = rf(client, opts, epoch, blockIndex, id, positionOfCollectionInBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisputeCollectionIdShouldBePresent provides a mock function with given fields: client, opts, epoch, blockIndex, id
func (_m *BlockManagerInterface) DisputeCollectionIdShouldBePresent(client *ethclient.Client, opts *bind.TransactOpts, epoch uint32, blockIndex uint8, id uint16) (*types.Transaction, error) {
	ret := _m.Called(client, opts, epoch, blockIndex, id)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, uint16) *types.Transaction); ok {
		r0 = rf(client, opts, epoch, blockIndex, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, uint16) error); ok {
		r1 = rf(client, opts, epoch, blockIndex, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisputeOnOrderOfIds provides a mock function with given fields: client, opts, epoch, blockIndex, index0, index1
func (_m *BlockManagerInterface) DisputeOnOrderOfIds(client *ethclient.Client, opts *bind.TransactOpts, epoch uint32, blockIndex uint8, index0 *big.Int, index1 *big.Int) (*types.Transaction, error) {
	ret := _m.Called(client, opts, epoch, blockIndex, index0, index1)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, *big.Int, *big.Int) *types.Transaction); ok {
		r0 = rf(client, opts, epoch, blockIndex, index0, index1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, *big.Int, *big.Int) error); ok {
		r1 = rf(client, opts, epoch, blockIndex, index0, index1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disputes provides a mock function with given fields: client, opts, epoch, address
func (_m *BlockManagerInterface) Disputes(client *ethclient.Client, opts *bind.CallOpts, epoch uint32, address common.Address) (coretypes.DisputesStruct, error) {
	ret := _m.Called(client, opts, epoch, address)

	var r0 coretypes.DisputesStruct
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.CallOpts, uint32, common.Address) coretypes.DisputesStruct); ok {
		r0 = rf(client, opts, epoch, address)
	} else {
		r0 = ret.Get(0).(coretypes.DisputesStruct)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.CallOpts, uint32, common.Address) error); ok {
		r1 = rf(client, opts, epoch, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeDispute provides a mock function with given fields: client, opts, epoch, blockIndex, positionOfCollectionInBlock
func (_m *BlockManagerInterface) FinalizeDispute(client *ethclient.Client, opts *bind.TransactOpts, epoch uint32, blockIndex uint8, positionOfCollectionInBlock *big.Int) (*types.Transaction, error) {
	ret := _m.Called(client, opts, epoch, blockIndex, positionOfCollectionInBlock)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, *big.Int) *types.Transaction); ok {
		r0 = rf(client, opts, epoch, blockIndex, positionOfCollectionInBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, uint8, *big.Int) error); ok {
		r1 = rf(client, opts, epoch, blockIndex, positionOfCollectionInBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GiveSorted provides a mock function with given fields: blockManager, opts, epoch, leafId, sortedValues
func (_m *BlockManagerInterface) GiveSorted(blockManager *bindings.BlockManager, opts *bind.TransactOpts, epoch uint32, leafId uint16, sortedValues []*big.Int) (*types.Transaction, error) {
	ret := _m.Called(blockManager, opts, epoch, leafId, sortedValues)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bindings.BlockManager, *bind.TransactOpts, uint32, uint16, []*big.Int) *types.Transaction); ok {
		r0 = rf(blockManager, opts, epoch, leafId, sortedValues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bindings.BlockManager, *bind.TransactOpts, uint32, uint16, []*big.Int) error); ok {
		r1 = rf(blockManager, opts, epoch, leafId, sortedValues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Propose provides a mock function with given fields: client, opts, epoch, ids, medians, iteration, biggestInfluencerId
func (_m *BlockManagerInterface) Propose(client *ethclient.Client, opts *bind.TransactOpts, epoch uint32, ids []uint16, medians []*big.Int, iteration *big.Int, biggestInfluencerId uint32) (*types.Transaction, error) {
	ret := _m.Called(client, opts, epoch, ids, medians, iteration, biggestInfluencerId)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, uint32, []uint16, []*big.Int, *big.Int, uint32) *types.Transaction); ok {
		r0 = rf(client, opts, epoch, ids, medians, iteration, biggestInfluencerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, uint32, []uint16, []*big.Int, *big.Int, uint32) error); ok {
		r1 = rf(client, opts, epoch, ids, medians, iteration, biggestInfluencerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDispute provides a mock function with given fields: blockManager, opts, epoch
func (_m *BlockManagerInterface) ResetDispute(blockManager *bindings.BlockManager, opts *bind.TransactOpts, epoch uint32) (*types.Transaction, error) {
	ret := _m.Called(blockManager, opts, epoch)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bindings.BlockManager, *bind.TransactOpts, uint32) *types.Transaction); ok {
		r0 = rf(blockManager, opts, epoch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bindings.BlockManager, *bind.TransactOpts, uint32) error); ok {
		r1 = rf(blockManager, opts, epoch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBlockManagerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlockManagerInterface creates a new instance of BlockManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlockManagerInterface(t mockConstructorTestingTNewBlockManagerInterface) *BlockManagerInterface {
	mock := &BlockManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
